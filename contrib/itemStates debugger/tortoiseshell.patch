 src/TortoiseShell/ContextMenu.cpp | 35 +++++++++++++++++++++++++++++++++++
 1 file changed, 35 insertions(+)

diff --git a/src/TortoiseShell/ContextMenu.cpp b/src/TortoiseShell/ContextMenu.cpp
index 90059d3..0f90e3c 100644
--- a/src/TortoiseShell/ContextMenu.cpp
+++ b/src/TortoiseShell/ContextMenu.cpp
@@ -1087,6 +1087,18 @@ STDMETHODIMP CShellExt::QueryContextMenu_Wrap(HMENU hMenu,
 	InsertMenu(hMenu, indexMenu++, MF_SEPARATOR|MF_BYPOSITION, 0, NULL); idCmd++;
 	bool bShowIcons = !!DWORD(CRegStdDWORD(_T("Software\\TortoiseGit\\ShowContextMenuIcons"), TRUE));
 
+	CString blup;
+	blup.Format(_T("%d\n"), itemStates);
+	HANDLE file = ::CreateFile (_T("d:\\1.txt"),
+								GENERIC_WRITE, 
+								FILE_SHARE_READ, 
+								0, 
+								CREATE_ALWAYS, 
+								FILE_ATTRIBUTE_TEMPORARY,
+								0);
+	DWORD written = 0;
+	::WriteFile (file, blup, 2*blup.GetLength(), &written, 0);
+
 	while (menuInfo[menuIndex].command != ShellMenuLastEntry)
 	{
 		if (menuInfo[menuIndex].command == ShellSeparator)
@@ -1101,17 +1113,38 @@ STDMETHODIMP CShellExt::QueryContextMenu_Wrap(HMENU hMenu,
 		else
 		{
 			// check the conditions whether to show the menu entry or not
+			blup.Format(_T("menuIndex: %d, %d, %d, %d\n"), menuIndex, menuInfo[menuIndex].menuID, menuInfo[menuIndex].iconID, menuInfo[menuIndex].command);
+			::WriteFile (file, blup, 2*blup.GetLength(), &written, 0);
+
+			blup.Format(_T("1yes: %d, 1no: %d\n"), menuInfo[menuIndex].first.yes, menuInfo[menuIndex].first.no);
+			::WriteFile (file, blup, 2*blup.GetLength(), &written, 0);
+			blup.Format(_T("2yes: %d, 2no: %d\n"), menuInfo[menuIndex].second.yes, menuInfo[menuIndex].second.no);
+			::WriteFile (file, blup, 2*blup.GetLength(), &written, 0);
+			blup.Format(_T("3yes: %d, 3no: %d\n"), menuInfo[menuIndex].third.yes, menuInfo[menuIndex].third.no);
+			::WriteFile (file, blup, 2*blup.GetLength(), &written, 0);
+			blup.Format(_T("4yes: %d, 4no: %d\n"), menuInfo[menuIndex].fourth.yes, menuInfo[menuIndex].fourth.no);
+			::WriteFile (file, blup, 2*blup.GetLength(), &written, 0);
+
 			bool bInsertMenu = ShouldInsertItem(menuInfo[menuIndex]);
+			blup.Format(_T("insertmenu: %d\n"), bInsertMenu);
+			::WriteFile (file, blup, 2*blup.GetLength(), &written, 0);
+
 			if (menuInfo[menuIndex].menuID & menuex)
 			{
+				blup.Format(_T("is extended\n"));
+				::WriteFile (file, blup, 2*blup.GetLength(), &written, 0);
 				if( !(itemStates & ITEMIS_EXTENDED) )
 				{
 					bInsertMenu = false;
 				}
+				blup.Format(_T("insertmenu: %d\n"), bInsertMenu);
+				::WriteFile (file, blup, 2*blup.GetLength(), &written, 0);
 			}
 
 			if (menuInfo[menuIndex].menuID & (~menumask))
 			{
+				blup.Format(_T("is not extended\n"));
+				::WriteFile (file, blup, 2*blup.GetLength(), &written, 0);
 				if (bInsertMenu)
 				{
 					bool bIsTop = ((topmenu & menuInfo[menuIndex].menuID) != 0);
@@ -1157,6 +1190,8 @@ STDMETHODIMP CShellExt::QueryContextMenu_Wrap(HMENU hMenu,
 		menuIndex++;
 	}
 
+	::CloseHandle(file);
+
 	// do not show TortoiseGit menu if it's empty
 	if (bMenuEmpty)
 	{
