<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<article lang="en" id="git-commit(1)">
<articleinfo>
    <title>git-commit(1)</title>
        <indexterm>
                <primary>git-commit(1)</primary>
        </indexterm>
</articleinfo>
<simplesect id="_name">
<title>NAME</title>
<simpara>git-commit - Record changes to the repository</simpara>
</simplesect>
<simplesect id="_synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout><emphasis>git commit</emphasis> [-a | --interactive] [-s] [-v] [-u&lt;mode&gt;] [--amend]
           [(-c | -C) &lt;commit&gt;] [-F &lt;file&gt; | -m &lt;msg&gt;]
           [--allow-empty] [--no-verify] [-e] [--author=&lt;author&gt;]
           [--cleanup=&lt;mode&gt;] [--] [[-i | -o ]&lt;file&gt;&#8230;]</literallayout>
</blockquote>
</simplesect>
<simplesect id="_description">
<title>DESCRIPTION</title>
<simpara>Stores the current contents of the index in a new commit along
with a log message from the user describing the changes.</simpara>
<simpara>The content to be added can be specified in several ways:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
by using <emphasis>git-add</emphasis> to incrementally "add" changes to the
   index before using the <emphasis>commit</emphasis> command (Note: even modified
   files must be "added");
</simpara>
</listitem>
<listitem>
<simpara>
by using <emphasis>git-rm</emphasis> to remove files from the working tree
   and the index, again before using the <emphasis>commit</emphasis> command;
</simpara>
</listitem>
<listitem>
<simpara>
by listing files as arguments to the <emphasis>commit</emphasis> command, in which
   case the commit will ignore changes staged in the index, and instead
   record the current content of the listed files (which must already
   be known to git);
</simpara>
</listitem>
<listitem>
<simpara>
by using the -a switch with the <emphasis>commit</emphasis> command to automatically
   "add" changes from all known files (i.e. all files that are already
   listed in the index) and to automatically "rm" files in the index
   that have been removed from the working tree, and then perform the
   actual commit;
</simpara>
</listitem>
<listitem>
<simpara>
by using the --interactive switch with the <emphasis>commit</emphasis> command to decide one
   by one which files should be part of the commit, before finalizing the
   operation.  Currently, this is done by invoking <emphasis>git-add --interactive</emphasis>.
</simpara>
</listitem>
</orderedlist>
<simpara>The <emphasis>git-status</emphasis> command can be used to obtain a
summary of what is included by any of the above for the next
commit by giving the same set of parameters you would give to
this command.</simpara>
<simpara>If you make a commit and then find a mistake immediately after
that, you can recover from it with <emphasis>git-reset</emphasis>.</simpara>
</simplesect>
<simplesect id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
-a
</term>
<term>
--all
</term>
<listitem>
<simpara>
        Tell the command to automatically stage files that have
        been modified and deleted, but new files you have not
        told git about are not affected.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-C &lt;commit&gt;
</term>
<term>
--reuse-message=&lt;commit&gt;
</term>
<listitem>
<simpara>
        Take an existing commit object, and reuse the log message
        and the authorship information (including the timestamp)
        when creating the commit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-c &lt;commit&gt;
</term>
<term>
--reedit-message=&lt;commit&gt;
</term>
<listitem>
<simpara>
        Like <emphasis>-C</emphasis>, but with <emphasis>-c</emphasis> the editor is invoked, so that
        the user can further edit the commit message.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-F &lt;file&gt;
</term>
<term>
--file=&lt;file&gt;
</term>
<listitem>
<simpara>
        Take the commit message from the given file.  Use <emphasis>-</emphasis> to
        read the message from the standard input.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--author=&lt;author&gt;
</term>
<listitem>
<simpara>
        Override the author name used in the commit.  You can use the
        standard <literal>A U Thor &lt;<ulink url="mailto:author@example.com">author@example.com</ulink>&gt;</literal> format.  Otherwise,
        an existing commit that matches the given string and its author
        name is used.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-m &lt;msg&gt;
</term>
<term>
--message=&lt;msg&gt;
</term>
<listitem>
<simpara>
        Use the given &lt;msg&gt; as the commit message.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-t &lt;file&gt;
</term>
<term>
--template=&lt;file&gt;
</term>
<listitem>
<simpara>
        Use the contents of the given file as the initial version
        of the commit message. The editor is invoked and you can
        make subsequent changes. If a message is specified using
        the <literal>-m</literal> or <literal>-F</literal> options, this option has no effect. This
        overrides the <literal>commit.template</literal> configuration variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-s
</term>
<term>
--signoff
</term>
<listitem>
<simpara>
        Add Signed-off-by line by the committer at the end of the commit
        log message.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-n
</term>
<term>
--no-verify
</term>
<listitem>
<simpara>
        This option bypasses the pre-commit and commit-msg hooks.
        See also <xref linkend="githooks(5)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--allow-empty
</term>
<listitem>
<simpara>
        Usually recording a commit that has the exact same tree as its
        sole parent commit is a mistake, and the command prevents you
        from making such a commit.  This option bypasses the safety, and
        is primarily for use by foreign scm interface scripts.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--cleanup=&lt;mode&gt;
</term>
<listitem>
<simpara>
        This option sets how the commit message is cleaned up.
        The  <emphasis>&lt;mode&gt;</emphasis> can be one of <emphasis>verbatim</emphasis>, <emphasis>whitespace</emphasis>, <emphasis>strip</emphasis>,
        and <emphasis>default</emphasis>. The <emphasis>default</emphasis> mode will strip leading and
        trailing empty lines and #commentary from the commit message
        only if the message is to be edited. Otherwise only whitespace
        removed. The <emphasis>verbatim</emphasis> mode does not change message at all,
        <emphasis>whitespace</emphasis> removes just leading/trailing whitespace lines
        and <emphasis>strip</emphasis> removes both whitespace and commentary.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-e
</term>
<term>
--edit
</term>
<listitem>
<simpara>
        The message taken from file with <literal>-F</literal>, command line with
        <literal>-m</literal>, and from file with <literal>-C</literal> are usually used as the
        commit log message unmodified.  This option lets you
        further edit the message taken from these sources.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--amend
</term>
<listitem>
<simpara>
        Used to amend the tip of the current branch. Prepare the tree
        object you would want to replace the latest commit as usual
        (this includes the usual -i/-o and explicit paths), and the
        commit log editor is seeded with the commit message from the
        tip of the current branch. The commit you create replaces the
        current tip&#8201;&#8212;&#8201;if it was a merge, it will have the parents of
        the current tip as parents&#8201;&#8212;&#8201;so the current top commit is
        discarded.
</simpara>
<simpara>It is a rough equivalent for:</simpara>
<literallayout>        $ git reset --soft HEAD^
        $ ... do something else to come up with the right tree ...
        $ git commit -c ORIG_HEAD</literallayout>
<simpara>but can be used to amend a merge commit.</simpara>
<simpara>You should understand the implications of rewriting history if you
amend a commit that has already been published.  (See the "RECOVERING
FROM UPSTREAM REBASE" section in <xref linkend="git-rebase(1)"/>.)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-i
</term>
<term>
--include
</term>
<listitem>
<simpara>
        Before making a commit out of staged contents so far,
        stage the contents of paths given on the command line
        as well.  This is usually not what you want unless you
        are concluding a conflicted merge.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-o
</term>
<term>
--only
</term>
<listitem>
<simpara>
        Make a commit only from the paths specified on the
        command line, disregarding any contents that have been
        staged so far. This is the default mode of operation of
        <emphasis>git-commit</emphasis> if any paths are given on the command line,
        in which case this option can be omitted.
        If this option is specified together with <emphasis>--amend</emphasis>, then
        no paths need to be specified, which can be used to amend
        the last commit without committing changes that have
        already been staged.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-u[&lt;mode&gt;]
</term>
<term>
--untracked-files[=&lt;mode&gt;]
</term>
<listitem>
<simpara>
        Show untracked files (Default: <emphasis>all</emphasis>).
</simpara>
<simpara>The mode parameter is optional, and is used to specify
the handling of untracked files. The possible options are:</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>no</emphasis>     - Show no untracked files
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>normal</emphasis> - Shows untracked files and directories
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>all</emphasis>    - Also shows individual files in untracked directories.
</simpara>
</listitem>
</itemizedlist>
<simpara>See <xref linkend="git-config(1)"/> for configuration variable
used to change the default for when the option is not
specified.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-v
</term>
<term>
--verbose
</term>
<listitem>
<simpara>
        Show unified diff between the HEAD commit and what
        would be committed at the bottom of the commit message
        template.  Note that this diff output doesn&#8217;t have its
        lines prefixed with <emphasis>#</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-q
</term>
<term>
--quiet
</term>
<listitem>
<simpara>
        Suppress commit summary message.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--
</term>
<listitem>
<simpara>
        Do not interpret any more arguments as options.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;file&gt;&#8230;
</term>
<listitem>
<simpara>
        When files are given on the command line, the command
        commits the contents of the named files, without
        recording the changes already staged.  The contents of
        these files are also staged for the next commit on top
        of what have been staged before.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="_examples">
<title>EXAMPLES</title>
<simpara>When recording your own work, the contents of modified files in
your working tree are temporarily stored to a staging area
called the "index" with <emphasis>git-add</emphasis>.  A file can be
reverted back, only in the index but not in the working tree,
to that of the last commit with <literal>git reset HEAD&#8201;&#8212;&#8201;&lt;file&gt;</literal>,
which effectively reverts <emphasis>git-add</emphasis> and prevents the changes to
this file from participating in the next commit.  After building
the state to be committed incrementally with these commands,
<literal>git commit</literal> (without any pathname parameter) is used to record what
has been staged so far.  This is the most basic form of the
command.  An example:</simpara>
<literallayout>$ edit hello.c
$ git rm goodbye.c
$ git add hello.c
$ git commit</literallayout>
<simpara>Instead of staging files after each individual change, you can
tell <literal>git commit</literal> to notice the changes to the files whose
contents are tracked in
your working tree and do corresponding <literal>git add</literal> and <literal>git rm</literal>
for you.  That is, this example does the same as the earlier
example if there is no other change in your working tree:</simpara>
<literallayout>$ edit hello.c
$ rm goodbye.c
$ git commit -a</literallayout>
<simpara>The command <literal>git commit -a</literal> first looks at your working tree,
notices that you have modified hello.c and removed goodbye.c,
and performs necessary <literal>git add</literal> and <literal>git rm</literal> for you.</simpara>
<simpara>After staging changes to many files, you can alter the order the
changes are recorded in, by giving pathnames to <literal>git commit</literal>.
When pathnames are given, the command makes a commit that
only records the changes made to the named paths:</simpara>
<literallayout>$ edit hello.c hello.h
$ git add hello.c hello.h
$ edit Makefile
$ git commit Makefile</literallayout>
<simpara>This makes a commit that records the modification to <literal>Makefile</literal>.
The changes staged for <literal>hello.c</literal> and <literal>hello.h</literal> are not included
in the resulting commit.  However, their changes are not lost&#8201;&#8212;&#8201;they are still staged and merely held back.  After the above
sequence, if you do:</simpara>
<literallayout>$ git commit</literallayout>
<simpara>this second commit would record the changes to <literal>hello.c</literal> and
<literal>hello.h</literal> as expected.</simpara>
<simpara>After a merge (initiated by <emphasis>git-merge</emphasis> or <emphasis>git-pull</emphasis>) stops
because of conflicts, cleanly merged
paths are already staged to be committed for you, and paths that
conflicted are left in unmerged state.  You would have to first
check which paths are conflicting with <emphasis>git-status</emphasis>
and after fixing them manually in your working tree, you would
stage the result as usual with <emphasis>git-add</emphasis>:</simpara>
<literallayout>$ git status | grep unmerged
unmerged: hello.c
$ edit hello.c
$ git add hello.c</literallayout>
<simpara>After resolving conflicts and staging the result, <literal>git ls-files -u</literal>
would stop mentioning the conflicted path.  When you are done,
run <literal>git commit</literal> to finally record the merge:</simpara>
<literallayout>$ git commit</literallayout>
<simpara>As with the case to record your own changes, you can use <literal>-a</literal>
option to save typing.  One difference is that during a merge
resolution, you cannot use <literal>git commit</literal> with pathnames to
alter the order the changes are committed, because the merge
should be recorded as a single commit.  In fact, the command
refuses to run when given pathnames (but see <literal>-i</literal> option).</simpara>
</simplesect>
<simplesect id="_discussion">
<title>DISCUSSION</title>
<simpara>Though not required, it&#8217;s a good idea to begin the commit message
with a single short (less than 50 character) line summarizing the
change, followed by a blank line and then a more thorough description.
Tools that turn commits into email, for example, use the first line
on the Subject: line and the rest of the commit in the body.</simpara>
<simpara>At the core level, git is character encoding agnostic.</simpara>
<itemizedlist>
<listitem>
<simpara>
The pathnames recorded in the index and in the tree objects
   are treated as uninterpreted sequences of non-NUL bytes.
   What readdir(2) returns are what are recorded and compared
   with the data git keeps track of, which in turn are expected
   to be what lstat(2) and creat(2) accepts.  There is no such
   thing as pathname encoding translation.
</simpara>
</listitem>
<listitem>
<simpara>
The contents of the blob objects are uninterpreted sequences
   of bytes.  There is no encoding translation at the core
   level.
</simpara>
</listitem>
<listitem>
<simpara>
The commit log messages are uninterpreted sequences of non-NUL
   bytes.
</simpara>
</listitem>
</itemizedlist>
<simpara>Although we encourage that the commit log messages are encoded
in UTF-8, both the core and git Porcelain are designed not to
force UTF-8 on projects.  If all participants of a particular
project find it more convenient to use legacy encodings, git
does not forbid it.  However, there are a few things to keep in
mind.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
<emphasis>git-commit</emphasis> and <emphasis>git-commit-tree</emphasis> issues
  a warning if the commit log message given to it does not look
  like a valid UTF-8 string, unless you explicitly say your
  project uses a legacy encoding.  The way to say this is to
  have i18n.commitencoding in <literal>.git/config</literal> file, like this:
</simpara>
<literallayout>[i18n]
        commitencoding = ISO-8859-1</literallayout>
<simpara>Commit objects created with the above setting record the value
of <literal>i18n.commitencoding</literal> in its <literal>encoding</literal> header.  This is to
help other people who look at them later.  Lack of this header
implies that the commit log message is encoded in UTF-8.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>git-log</emphasis>, <emphasis>git-show</emphasis>, <emphasis>git-blame</emphasis> and friends look at the
  <literal>encoding</literal> header of a commit object, and try to re-code the
  log message into UTF-8 unless otherwise specified.  You can
  specify the desired output encoding with
  <literal>i18n.logoutputencoding</literal> in <literal>.git/config</literal> file, like this:
</simpara>
<literallayout>[i18n]
        logoutputencoding = ISO-8859-1</literallayout>
<simpara>If you do not have this configuration variable, the value of
<literal>i18n.commitencoding</literal> is used instead.</simpara>
</listitem>
</orderedlist>
<simpara>Note that we deliberately chose not to re-code the commit log
message when a commit is made to force UTF-8 at the commit
object level, because re-coding to UTF-8 is not necessarily a
reversible operation.</simpara>
</simplesect>
<simplesect id="_environment_and_configuration_variables">
<title>ENVIRONMENT AND CONFIGURATION VARIABLES</title>
<simpara>The editor used to edit the commit log message will be chosen from the
GIT_EDITOR environment variable, the core.editor configuration variable, the
VISUAL environment variable, or the EDITOR environment variable (in that
order).</simpara>
</simplesect>
<simplesect id="_hooks">
<title>HOOKS</title>
<simpara>This command can run <literal>commit-msg</literal>, <literal>prepare-commit-msg</literal>, <literal>pre-commit</literal>,
and <literal>post-commit</literal> hooks.  See <xref linkend="githooks(5)"/> for more
information.</simpara>
</simplesect>
<simplesect id="_see_also">
<title>SEE ALSO</title>
<simpara><xref linkend="git-add(1)"/>,
<xref linkend="git-rm(1)"/>,
<xref linkend="git-mv(1)"/>,
<xref linkend="git-merge(1)"/>,
<xref linkend="git-commit-tree(1)"/></simpara>
</simplesect>
<simplesect id="_author">
<title>Author</title>
<simpara>Written by Linus Torvalds &lt;<ulink url="mailto:torvalds@osdl.org">torvalds@osdl.org</ulink>&gt; and
Junio C Hamano &lt;<ulink url="mailto:gitster@pobox.com">gitster@pobox.com</ulink>&gt;</simpara>
</simplesect>
<simplesect id="_git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)"/> suite</simpara>
</simplesect>
</article>
