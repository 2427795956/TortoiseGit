<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<article lang="en" id="git-config(1)">
<articleinfo>
    <title>git-config(1)</title>
        <indexterm>
                <primary>git-config(1)</primary>
        </indexterm>
</articleinfo>
<simplesect id="_name">
<title>NAME</title>
<simpara>git-config - Get and set repository or global options</simpara>
</simplesect>
<simplesect id="_synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout><emphasis>git config</emphasis> [&lt;file-option&gt;] [type] [-z|--null] name [value [value_regex]]
<emphasis>git config</emphasis> [&lt;file-option&gt;] [type] --add name value
<emphasis>git config</emphasis> [&lt;file-option&gt;] [type] --replace-all name [value [value_regex]]
<emphasis>git config</emphasis> [&lt;file-option&gt;] [type] [-z|--null] --get name [value_regex]
<emphasis>git config</emphasis> [&lt;file-option&gt;] [type] [-z|--null] --get-all name [value_regex]
<emphasis>git config</emphasis> [&lt;file-option&gt;] [type] [-z|--null] --get-regexp name_regex [value_regex]
<emphasis>git config</emphasis> [&lt;file-option&gt;] --unset name [value_regex]
<emphasis>git config</emphasis> [&lt;file-option&gt;] --unset-all name [value_regex]
<emphasis>git config</emphasis> [&lt;file-option&gt;] --rename-section old_name new_name
<emphasis>git config</emphasis> [&lt;file-option&gt;] --remove-section name
<emphasis>git config</emphasis> [&lt;file-option&gt;] [-z|--null] -l | --list
<emphasis>git config</emphasis> [&lt;file-option&gt;] --get-color name [default]
<emphasis>git config</emphasis> [&lt;file-option&gt;] --get-colorbool name [stdout-is-tty]</literallayout>
</blockquote>
</simplesect>
<simplesect id="_description">
<title>DESCRIPTION</title>
<simpara>You can query/set/replace/unset options with this command. The name is
actually the section and the key separated by a dot, and the value will be
escaped.</simpara>
<simpara>Multiple lines can be added to an option by using the <emphasis>--add</emphasis> option.
If you want to update or unset an option which can occur on multiple
lines, a POSIX regexp <literal>value_regex</literal> needs to be given.  Only the
existing values that match the regexp are updated or unset.  If
you want to handle the lines that do <emphasis role="strong">not</emphasis> match the regex, just
prepend a single exclamation mark in front (see also <xref linkend="EXAMPLES"/>).</simpara>
<simpara>The type specifier can be either <emphasis>--int</emphasis> or <emphasis>--bool</emphasis>, which will make
<emphasis>git-config</emphasis> ensure that the variable(s) are of the given type and
convert the value to the canonical form (simple decimal number for int,
a "true" or "false" string for bool).  If no type specifier is passed,
no checks or transformations are performed on the value.</simpara>
<simpara>The file-option can be one of <emphasis>--system</emphasis>, <emphasis>--global</emphasis> or <emphasis>--file</emphasis>
which specify where the values will be read from or written to.
The default is to assume the config file of the current repository,
.git/config unless defined otherwise with GIT_DIR and GIT_CONFIG
(see <xref linkend="FILES"/>).</simpara>
<simpara>This command will fail if:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
The config file is invalid,
</simpara>
</listitem>
<listitem>
<simpara>
Can not write to the config file,
</simpara>
</listitem>
<listitem>
<simpara>
no section was provided,
</simpara>
</listitem>
<listitem>
<simpara>
the section or key is invalid,
</simpara>
</listitem>
<listitem>
<simpara>
you try to unset an option which does not exist,
</simpara>
</listitem>
<listitem>
<simpara>
you try to unset/set an option for which multiple lines match, or
</simpara>
</listitem>
<listitem>
<simpara>
you use <emphasis>--global</emphasis> option without $HOME being properly set.
</simpara>
</listitem>
</orderedlist>
</simplesect>
<simplesect id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
--replace-all
</term>
<listitem>
<simpara>
        Default behavior is to replace at most one line. This replaces
        all lines matching the key (and optionally the value_regex).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--add
</term>
<listitem>
<simpara>
        Adds a new line to the option without altering any existing
        values.  This is the same as providing <emphasis>^$</emphasis> as the value_regex.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--get
</term>
<listitem>
<simpara>
        Get the value for a given key (optionally filtered by a regex
        matching the value). Returns error code 1 if the key was not
        found and error code 2 if multiple key values were found.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--get-all
</term>
<listitem>
<simpara>
        Like get, but does not fail if the number of values for the key
        is not exactly one.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--get-regexp
</term>
<listitem>
<simpara>
        Like --get-all, but interprets the name as a regular expression.
        Also outputs the key names.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--global
</term>
<listitem>
<simpara>
        For writing options: write to global ~/.gitconfig file rather than
        the repository .git/config.
</simpara>
<simpara>For reading options: read only from global ~/.gitconfig rather than
from all available files.</simpara>
<simpara>See also <xref linkend="FILES"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--system
</term>
<listitem>
<simpara>
        For writing options: write to system-wide $(prefix)/etc/gitconfig
        rather than the repository .git/config.
</simpara>
<simpara>For reading options: read only from system-wide $(prefix)/etc/gitconfig
rather than from all available files.</simpara>
<simpara>See also <xref linkend="FILES"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-f config-file
</term>
<term>
--file config-file
</term>
<listitem>
<simpara>
        Use the given config file instead of the one specified by GIT_CONFIG.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--remove-section
</term>
<listitem>
<simpara>
        Remove the given section from the configuration file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--rename-section
</term>
<listitem>
<simpara>
        Rename the given section to a new name.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--unset
</term>
<listitem>
<simpara>
        Remove the line matching the key from config file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--unset-all
</term>
<listitem>
<simpara>
        Remove all lines matching the key from config file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-l
</term>
<term>
--list
</term>
<listitem>
<simpara>
        List all variables set in config file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--bool
</term>
<listitem>
<simpara>
        <emphasis>git-config</emphasis> will ensure that the output is "true" or "false"
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--int
</term>
<listitem>
<simpara>
        <emphasis>git-config</emphasis> will ensure that the output is a simple
        decimal number.  An optional value suffix of <emphasis>k</emphasis>, <emphasis>m</emphasis>, or <emphasis>g</emphasis>
        in the config file will cause the value to be multiplied
        by 1024, 1048576, or 1073741824 prior to output.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-z
</term>
<term>
--null
</term>
<listitem>
<simpara>
        For all options that output values and/or keys, always
        end values with the null character (instead of a
        newline). Use newline instead as a delimiter between
        key and value. This allows for secure parsing of the
        output without getting confused e.g. by values that
        contain line breaks.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--get-colorbool name [stdout-is-tty]
</term>
<listitem>
<simpara>
        Find the color setting for <literal>name</literal> (e.g. <literal>color.diff</literal>) and output
        "true" or "false".  <literal>stdout-is-tty</literal> should be either "true" or
        "false", and is taken into account when configuration says
        "auto".  If <literal>stdout-is-tty</literal> is missing, then checks the standard
        output of the command itself, and exits with status 0 if color
        is to be used, or exits with status 1 otherwise.
        When the color setting for <literal>name</literal> is undefined, the command uses
        <literal>color.ui</literal> as fallback.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--get-color name default
</term>
<listitem>
<simpara>
        Find the color configured for <literal>name</literal> (e.g. <literal>color.diff.new</literal>) and
        output it as the ANSI color escape sequence to the standard
        output.  The optional <literal>default</literal> parameter is used instead, if
        there is no color configured for <literal>name</literal>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="FILES">
<title>FILES</title>
<simpara>If not set explicitly with <emphasis>--file</emphasis>, there are three files where
<emphasis>git-config</emphasis> will search for configuration options:</simpara>
<variablelist>
<varlistentry>
<term>
$GIT_DIR/config
</term>
<listitem>
<simpara>
        Repository specific configuration file. (The filename is
        of course relative to the repository root, not the working
        directory.)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
~/.gitconfig
</term>
<listitem>
<simpara>
        User-specific configuration file. Also called "global"
        configuration file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
$(prefix)/etc/gitconfig
</term>
<listitem>
<simpara>
        System-wide configuration file.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>If no further options are given, all reading options will read all of these
files that are available. If the global or the system-wide configuration
file are not available they will be ignored. If the repository configuration
file is not available or readable, <emphasis>git-config</emphasis> will exit with a non-zero
error code. However, in neither case will an error message be issued.</simpara>
<simpara>All writing options will per default write to the repository specific
configuration file. Note that this also affects options like <emphasis>--replace-all</emphasis>
and <emphasis>--unset</emphasis>. <emphasis role="strong"><emphasis>git-config</emphasis> will only ever change one file at a time</emphasis>.</simpara>
<simpara>You can override these rules either by command line options or by environment
variables. The <emphasis>--global</emphasis> and the <emphasis>--system</emphasis> options will limit the file used
to the global or system-wide file respectively. The GIT_CONFIG environment
variable has a similar effect, but you can specify any filename you want.</simpara>
</simplesect>
<simplesect id="_environment">
<title>ENVIRONMENT</title>
<variablelist>
<varlistentry>
<term>
GIT_CONFIG
</term>
<listitem>
<simpara>
        Take the configuration from the given file instead of .git/config.
        Using the "--global" option forces this to ~/.gitconfig. Using the
        "--system" option forces this to $(prefix)/etc/gitconfig.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>See also <xref linkend="FILES"/>.</simpara>
</simplesect>
<simplesect id="EXAMPLES">
<title>EXAMPLES</title>
<simpara>Given a .git/config like this:</simpara>
<literallayout class="monospaced">#
# This is the config file, and
# a '#' or ';' character indicates
# a comment
#</literallayout>
<literallayout class="monospaced">; core variables
[core]
        ; Don't trust file modes
        filemode = false</literallayout>
<literallayout class="monospaced">; Our diff algorithm
[diff]
        external = /usr/local/bin/diff-wrapper
        renames = true</literallayout>
<literallayout class="monospaced">; Proxy settings
[core]
        gitproxy="proxy-command" for kernel.org
        gitproxy=default-proxy ; for all the rest</literallayout>
<simpara>you can set the filemode to true with</simpara>
<literallayout>% git config core.filemode true</literallayout>
<simpara>The hypothetical proxy command entries actually have a postfix to discern
what URL they apply to. Here is how to change the entry for kernel.org
to "ssh".</simpara>
<literallayout>% git config core.gitproxy '"ssh" for kernel.org' 'for kernel.org$'</literallayout>
<simpara>This makes sure that only the key/value pair for kernel.org is replaced.</simpara>
<simpara>To delete the entry for renames, do</simpara>
<literallayout>% git config --unset diff.renames</literallayout>
<simpara>If you want to delete an entry for a multivar (like core.gitproxy above),
you have to provide a regex matching the value of exactly one line.</simpara>
<simpara>To query the value for a given key, do</simpara>
<literallayout>% git config --get core.filemode</literallayout>
<simpara>or</simpara>
<literallayout>% git config core.filemode</literallayout>
<simpara>or, to query a multivar:</simpara>
<literallayout>% git config --get core.gitproxy "for kernel.org$"</literallayout>
<simpara>If you want to know all the values for a multivar, do:</simpara>
<literallayout>% git config --get-all core.gitproxy</literallayout>
<simpara>If you like to live dangerously, you can replace <emphasis role="strong">all</emphasis> core.gitproxy by a
new one with</simpara>
<literallayout>% git config --replace-all core.gitproxy ssh</literallayout>
<simpara>However, if you really only want to replace the line for the default proxy,
i.e. the one without a "for &#8230;" postfix, do something like this:</simpara>
<literallayout>% git config core.gitproxy ssh '! for '</literallayout>
<simpara>To actually match only values with an exclamation mark, you have to</simpara>
<literallayout>% git config section.key value '[!]'</literallayout>
<simpara>To add a new proxy, without altering any of the existing ones, use</simpara>
<literallayout>% git config core.gitproxy '"proxy-command" for example.com'</literallayout>
<simpara>An example to use customized color from the configuration in your
script:</simpara>
<literallayout>#!/bin/sh
WS=$(git config --get-color color.diff.whitespace "blue reverse")
RESET=$(git config --get-color "" "reset")
echo "${WS}your whitespace color or blue reverse${RESET}"</literallayout>
</simplesect>
<simplesect id="_configuration_file">
<title>CONFIGURATION FILE</title>
<simpara>The git configuration file contains a number of variables that affect
the git command&#8217;s behavior. <literal>.git/config</literal> file for each repository
is used to store the information for that repository, and
<literal>$HOME/.gitconfig</literal> is used to store per user information to give
fallback values for <literal>.git/config</literal> file. The file <literal>/etc/gitconfig</literal>
can be used to store system-wide defaults.</simpara>
<simpara>They can be used by both the git plumbing
and the porcelains. The variables are divided into sections, where
in the fully qualified variable name the variable itself is the last
dot-separated segment and the section name is everything before the last
dot. The variable names are case-insensitive and only alphanumeric
characters are allowed. Some variables may appear multiple times.</simpara>
<simplesect id="_syntax">
<title>Syntax</title>
<simpara>The syntax is fairly flexible and permissive; whitespaces are mostly
ignored.  The <emphasis>#</emphasis> and <emphasis>;</emphasis> characters begin comments to the end of line,
blank lines are ignored.</simpara>
<simpara>The file consists of sections and variables.  A section begins with
the name of the section in square brackets and continues until the next
section begins.  Section names are not case sensitive.  Only alphanumeric
characters, <emphasis><literal>-</literal></emphasis> and <emphasis><literal>.</literal></emphasis> are allowed in section names.  Each variable
must belong to some section, which means that there must be section
header before first setting of a variable.</simpara>
<simpara>Sections can be further divided into subsections.  To begin a subsection
put its name in double quotes, separated by space from the section name,
in the section header, like in example below:</simpara>
<literallayout>        [section "subsection"]</literallayout>
<simpara>Subsection names can contain any characters except newline (doublequote
<emphasis><literal>"</literal></emphasis> and backslash have to be escaped as <emphasis><literal>\"</literal></emphasis> and <emphasis><literal>\\</literal></emphasis>,
respectively) and are case sensitive.  Section header cannot span multiple
lines.  Variables may belong directly to a section or to a given subsection.
You can have <literal>[section]</literal> if you have <literal>[section "subsection"]</literal>, but you
don&#8217;t need to.</simpara>
<simpara>There is also (case insensitive) alternative <literal>[section.subsection]</literal> syntax.
In this syntax subsection names follow the same restrictions as for section
name.</simpara>
<simpara>All the other lines are recognized as setting variables, in the form
<emphasis>name = value</emphasis>.  If there is no equal sign on the line, the entire line
is taken as <emphasis>name</emphasis> and the variable is recognized as boolean "true".
The variable names are case-insensitive and only alphanumeric
characters and <emphasis><literal>-</literal></emphasis> are allowed.  There can be more than one value
for a given variable; we say then that variable is multivalued.</simpara>
<simpara>Leading and trailing whitespace in a variable value is discarded.
Internal whitespace within a variable value is retained verbatim.</simpara>
<simpara>The values following the equals sign in variable assign are all either
a string, an integer, or a boolean.  Boolean values may be given as yes/no,
0/1 or true/false.  Case is not significant in boolean values, when
converting value to the canonical form using <emphasis>--bool</emphasis> type specifier;
<emphasis>git-config</emphasis> will ensure that the output is "true" or "false".</simpara>
<simpara>String values may be entirely or partially enclosed in double quotes.
You need to enclose variable value in double quotes if you want to
preserve leading or trailing whitespace, or if variable value contains
beginning of comment characters (if it contains <emphasis>#</emphasis> or <emphasis>;</emphasis>).
Double quote <emphasis><literal>"</literal></emphasis> and backslash <emphasis><literal>\</literal></emphasis> characters in variable value must
be escaped: use <emphasis><literal>\"</literal></emphasis> for <emphasis><literal>"</literal></emphasis> and <emphasis><literal>\\</literal></emphasis> for <emphasis><literal>\</literal></emphasis>.</simpara>
<simpara>The following escape sequences (beside <emphasis><literal>\"</literal></emphasis> and <emphasis><literal>\\</literal></emphasis>) are recognized:
<emphasis><literal>\n</literal></emphasis> for newline character (NL), <emphasis><literal>\t</literal></emphasis> for horizontal tabulation (HT, TAB)
and <emphasis><literal>\b</literal></emphasis> for backspace (BS).  No other char escape sequence, nor octal
char sequences are valid.</simpara>
<simpara>Variable value ending in a <emphasis><literal>\</literal></emphasis> is continued on the next line in the
customary UNIX fashion.</simpara>
<simpara>Some variables may require special value format.</simpara>
</simplesect>
<simplesect id="_example">
<title>Example</title>
<literallayout class="monospaced"># Core variables
[core]
        ; Don't trust file modes
        filemode = false</literallayout>
<literallayout class="monospaced"># Our diff algorithm
[diff]
        external = /usr/local/bin/diff-wrapper
        renames = true</literallayout>
<literallayout class="monospaced">[branch "devel"]
        remote = origin
        merge = refs/heads/devel</literallayout>
<literallayout class="monospaced"># Proxy settings
[core]
        gitProxy="ssh" for "kernel.org"
        gitProxy=default-proxy ; for the rest</literallayout>
</simplesect>
<simplesect id="_variables">
<title>Variables</title>
<simpara>Note that this list is non-comprehensive and not necessarily complete.
For command-specific variables, you will find a more detailed description
in the appropriate manual page. You will find a description of non-core
porcelain configuration variables in the respective porcelain documentation.</simpara>
<variablelist>
<varlistentry>
<term>
core.fileMode
</term>
<listitem>
<simpara>
        If false, the executable bit differences between the index and
        the working copy are ignored; useful on broken filesystems like FAT.
        See <xref linkend="git-update-index(1)"/>. True by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.ignoreCygwinFSTricks
</term>
<listitem>
<simpara>
        This option is only used by Cygwin implementation of Git. If false,
        the Cygwin stat() and lstat() functions are used. This may be useful
        if your repository consists of a few separate directories joined in
        one hierarchy using Cygwin mount. If true, Git uses native Win32 API
        whenever it is possible and falls back to Cygwin functions only to
        handle symbol links. The native mode is more than twice faster than
        normal Cygwin l/stat() functions. True by default, unless core.filemode
        is true, in which case ignoreCygwinFSTricks is ignored as Cygwin&#8217;s
        POSIX emulation is required to support core.filemode.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.trustctime
</term>
<listitem>
<simpara>
        If false, the ctime differences between the index and the
        working copy are ignored; useful when the inode change time
        is regularly modified by something outside Git (file system
        crawlers and some backup systems).
        See <xref linkend="git-update-index(1)"/>. True by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.quotepath
</term>
<listitem>
<simpara>
        The commands that output paths (e.g. <emphasis>ls-files</emphasis>,
        <emphasis>diff</emphasis>), when not given the <literal>-z</literal> option, will quote
        "unusual" characters in the pathname by enclosing the
        pathname in a double-quote pair and with backslashes the
        same way strings in C source code are quoted.  If this
        variable is set to false, the bytes higher than 0x80 are
        not quoted but output as verbatim.  Note that double
        quote, backslash and control characters are always
        quoted without <literal>-z</literal> regardless of the setting of this
        variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.autocrlf
</term>
<listitem>
<simpara>
        If true, makes git convert <literal>CRLF</literal> at the end of lines in text files to
        <literal>LF</literal> when reading from the filesystem, and convert in reverse when
        writing to the filesystem.  The variable can be set to
        <emphasis>input</emphasis>, in which case the conversion happens only while
        reading from the filesystem but files are written out with
        <literal>LF</literal> at the end of lines.  Currently, which paths to consider
        "text" (i.e. be subjected to the autocrlf mechanism) is
        decided purely based on the contents.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.safecrlf
</term>
<listitem>
<simpara>
        If true, makes git check if converting <literal>CRLF</literal> as controlled by
        <literal>core.autocrlf</literal> is reversible.  Git will verify if a command
        modifies a file in the work tree either directly or indirectly.
        For example, committing a file followed by checking out the
        same file should yield the original file in the work tree.  If
        this is not the case for the current setting of
        <literal>core.autocrlf</literal>, git will reject the file.  The variable can
        be set to "warn", in which case git will only warn about an
        irreversible conversion but continue the operation.
</simpara>
<simpara>CRLF conversion bears a slight chance of corrupting data.
autocrlf=true will convert CRLF to LF during commit and LF to
CRLF during checkout.  A file that contains a mixture of LF and
CRLF before the commit cannot be recreated by git.  For text
files this is the right thing to do: it corrects line endings
such that we have only LF line endings in the repository.
But for binary files that are accidentally classified as text the
conversion can corrupt data.</simpara>
<simpara>If you recognize such corruption early you can easily fix it by
setting the conversion type explicitly in .gitattributes.  Right
after committing you still have the original file in your work
tree and this file is not yet corrupted.  You can explicitly tell
git that this file is binary and git will handle the file
appropriately.</simpara>
<simpara>Unfortunately, the desired effect of cleaning up text files with
mixed line endings and the undesired effect of corrupting binary
files cannot be distinguished.  In both cases CRLFs are removed
in an irreversible way.  For text files this is the right thing
to do because CRLFs are line endings, while for binary files
converting CRLFs corrupts data.</simpara>
<simpara>Note, this safety check does not mean that a checkout will generate a
file identical to the original file for a different setting of
<literal>core.autocrlf</literal>, but only for the current one.  For example, a text
file with <literal>LF</literal> would be accepted with <literal>core.autocrlf=input</literal> and could
later be checked out with <literal>core.autocrlf=true</literal>, in which case the
resulting file would contain <literal>CRLF</literal>, although the original file
contained <literal>LF</literal>.  However, in both work trees the line endings would be
consistent, that is either all <literal>LF</literal> or all <literal>CRLF</literal>, but never mixed.  A
file with mixed line endings would be reported by the <literal>core.safecrlf</literal>
mechanism.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.symlinks
</term>
<listitem>
<simpara>
        If false, symbolic links are checked out as small plain files that
        contain the link text. <xref linkend="git-update-index(1)"/> and
        <xref linkend="git-add(1)"/> will not change the recorded type to regular
        file. Useful on filesystems like FAT that do not support
        symbolic links. True by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.gitProxy
</term>
<listitem>
<simpara>
        A "proxy command" to execute (as <emphasis>command host port</emphasis>) instead
        of establishing direct connection to the remote server when
        using the git protocol for fetching. If the variable value is
        in the "COMMAND for DOMAIN" format, the command is applied only
        on hostnames ending with the specified domain string. This variable
        may be set multiple times and is matched in the given order;
        the first match wins.
</simpara>
<simpara>Can be overridden by the <emphasis>GIT_PROXY_COMMAND</emphasis> environment variable
(which always applies universally, without the special "for"
handling).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.ignoreStat
</term>
<listitem>
<simpara>
        If true, commands which modify both the working tree and the index
        will mark the updated paths with the "assume unchanged" bit in the
        index. These marked files are then assumed to stay unchanged in the
        working copy, until you mark them otherwise manually - Git will not
        detect the file changes by lstat() calls. This is useful on systems
        where those are very slow, such as Microsoft Windows.
        See <xref linkend="git-update-index(1)"/>.
        False by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.preferSymlinkRefs
</term>
<listitem>
<simpara>
        Instead of the default "symref" format for HEAD
        and other symbolic reference files, use symbolic links.
        This is sometimes needed to work with old scripts that
        expect HEAD to be a symbolic link.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.bare
</term>
<listitem>
<simpara>
        If true this repository is assumed to be <emphasis>bare</emphasis> and has no
        working directory associated with it.  If this is the case a
        number of commands that require a working directory will be
        disabled, such as <xref linkend="git-add(1)"/> or <xref linkend="git-merge(1)"/>.
</simpara>
<simpara>This setting is automatically guessed by <xref linkend="git-clone(1)"/> or
<xref linkend="git-init(1)"/> when the repository was created.  By default a
repository that ends in "/.git" is assumed to be not bare (bare =
false), while all other repositories are assumed to be bare (bare
= true).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.worktree
</term>
<listitem>
<simpara>
        Set the path to the working tree.  The value will not be
        used in combination with repositories found automatically in
        a .git directory (i.e. $GIT_DIR is not set).
        This can be overridden by the GIT_WORK_TREE environment
        variable and the <emphasis>--work-tree</emphasis> command line option. It can be
        a absolute path or relative path to the directory specified by
        --git-dir or GIT_DIR.
        Note: If --git-dir or GIT_DIR are specified but none of
        --work-tree, GIT_WORK_TREE and core.worktree is specified,
        the current working directory is regarded as the top directory
        of your working tree.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.logAllRefUpdates
</term>
<listitem>
<simpara>
        Enable the reflog. Updates to a ref &lt;ref&gt; is logged to the file
        "$GIT_DIR/logs/&lt;ref&gt;", by appending the new and old
        SHA1, the date/time and the reason of the update, but
        only when the file exists.  If this configuration
        variable is set to true, missing "$GIT_DIR/logs/&lt;ref&gt;"
        file is automatically created for branch heads.
</simpara>
<simpara>This information can be used to determine what commit
was the tip of a branch "2 days ago".</simpara>
<simpara>This value is true by default in a repository that has
a working directory associated with it, and false by
default in a bare repository.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.repositoryFormatVersion
</term>
<listitem>
<simpara>
        Internal variable identifying the repository format and layout
        version.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.sharedRepository
</term>
<listitem>
<simpara>
        When <emphasis>group</emphasis> (or <emphasis>true</emphasis>), the repository is made shareable between
        several users in a group (making sure all the files and objects are
        group-writable). When <emphasis>all</emphasis> (or <emphasis>world</emphasis> or <emphasis>everybody</emphasis>), the
        repository will be readable by all users, additionally to being
        group-shareable. When <emphasis>umask</emphasis> (or <emphasis>false</emphasis>), git will use permissions
        reported by umask(2). When <emphasis>0xxx</emphasis>, where <emphasis>0xxx</emphasis> is an octal number,
        files in the repository will have this mode value. <emphasis>0xxx</emphasis> will override
        user&#8217;s umask value, and thus, users with a safe umask (0077) can use
        this option. Examples: <emphasis>0660</emphasis> is equivalent to <emphasis>group</emphasis>. <emphasis>0640</emphasis> is a
        repository that is group-readable but not group-writable.
        See <xref linkend="git-init(1)"/>. False by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.warnAmbiguousRefs
</term>
<listitem>
<simpara>
        If true, git will warn you if the ref name you passed it is ambiguous
        and might match multiple refs in the .git/refs/ tree. True by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.compression
</term>
<listitem>
<simpara>
        An integer -1..9, indicating a default compression level.
        -1 is the zlib default. 0 means no compression,
        and 1..9 are various speed/size tradeoffs, 9 being slowest.
        If set, this provides a default to other compression variables,
        such as <emphasis>core.loosecompression</emphasis> and <emphasis>pack.compression</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.loosecompression
</term>
<listitem>
<simpara>
        An integer -1..9, indicating the compression level for objects that
        are not in a pack file. -1 is the zlib default. 0 means no
        compression, and 1..9 are various speed/size tradeoffs, 9 being
        slowest.  If not set,  defaults to core.compression.  If that is
        not set,  defaults to 1 (best speed).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.packedGitWindowSize
</term>
<listitem>
<simpara>
        Number of bytes of a pack file to map into memory in a
        single mapping operation.  Larger window sizes may allow
        your system to process a smaller number of large pack files
        more quickly.  Smaller window sizes will negatively affect
        performance due to increased calls to the operating system&#8217;s
        memory manager, but may improve performance when accessing
        a large number of large pack files.
</simpara>
<simpara>Default is 1 MiB if NO_MMAP was set at compile time, otherwise 32
MiB on 32 bit platforms and 1 GiB on 64 bit platforms.  This should
be reasonable for all users/operating systems.  You probably do
not need to adjust this value.</simpara>
<simpara>Common unit suffixes of <emphasis>k</emphasis>, <emphasis>m</emphasis>, or <emphasis>g</emphasis> are supported.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.packedGitLimit
</term>
<listitem>
<simpara>
        Maximum number of bytes to map simultaneously into memory
        from pack files.  If Git needs to access more than this many
        bytes at once to complete an operation it will unmap existing
        regions to reclaim virtual address space within the process.
</simpara>
<simpara>Default is 256 MiB on 32 bit platforms and 8 GiB on 64 bit platforms.
This should be reasonable for all users/operating systems, except on
the largest projects.  You probably do not need to adjust this value.</simpara>
<simpara>Common unit suffixes of <emphasis>k</emphasis>, <emphasis>m</emphasis>, or <emphasis>g</emphasis> are supported.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.deltaBaseCacheLimit
</term>
<listitem>
<simpara>
        Maximum number of bytes to reserve for caching base objects
        that multiple deltafied objects reference.  By storing the
        entire decompressed base objects in a cache Git is able
        to avoid unpacking and decompressing frequently used base
        objects multiple times.
</simpara>
<simpara>Default is 16 MiB on all platforms.  This should be reasonable
for all users/operating systems, except on the largest projects.
You probably do not need to adjust this value.</simpara>
<simpara>Common unit suffixes of <emphasis>k</emphasis>, <emphasis>m</emphasis>, or <emphasis>g</emphasis> are supported.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.excludesfile
</term>
<listitem>
<simpara>
        In addition to <emphasis>.gitignore</emphasis> (per-directory) and
        <emphasis>.git/info/exclude</emphasis>, git looks into this file for patterns
        of files which are not meant to be tracked.  See
        <xref linkend="gitignore(5)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.editor
</term>
<listitem>
<simpara>
        Commands such as <literal>commit</literal> and <literal>tag</literal> that lets you edit
        messages by launching an editor uses the value of this
        variable when it is set, and the environment variable
        <literal>GIT_EDITOR</literal> is not set.  The order of preference is
        <literal>GIT_EDITOR</literal> environment, <literal>core.editor</literal>, <literal>VISUAL</literal> and
        <literal>EDITOR</literal> environment variables and then finally <literal>vi</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.pager
</term>
<listitem>
<simpara>
        The command that git will use to paginate output.  Can
        be overridden with the <literal>GIT_PAGER</literal> environment
        variable.  Note that git sets the <literal>LESS</literal> environment
        variable to <literal>FRSX</literal> if it is unset when it runs the
        pager.  One can change these settings by setting the
        <literal>LESS</literal> variable to some other value.  Alternately,
        these settings can be overridden on a project or
        global basis by setting the <literal>core.pager</literal> option.
        Setting <literal>core.pager</literal> has no affect on the <literal>LESS</literal>
        environment variable behaviour above, so if you want
        to override git&#8217;s default settings this way, you need
        to be explicit.  For example, to disable the S option
        in a backward compatible manner, set <literal>core.pager</literal>
        to "<literal>less -+$LESS -FRX</literal>".  This will be passed to the
        shell by git, which will translate the final command to
        "<literal>LESS=FRSX less -+FRSX -FRX</literal>".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.whitespace
</term>
<listitem>
<simpara>
        A comma separated list of common whitespace problems to
        notice.  <emphasis>git-diff</emphasis> will use <literal>color.diff.whitespace</literal> to
        highlight them, and <emphasis>git-apply --whitespace=error</emphasis> will
        consider them as errors.  You can prefix <literal>-</literal> to disable
        any of them (e.g. <literal>-trailing-space</literal>):
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>trailing-space</literal> treats trailing whitespaces at the end of the line
  as an error (enabled by default).
</simpara>
</listitem>
<listitem>
<simpara>
<literal>space-before-tab</literal> treats a space character that appears immediately
  before a tab character in the initial indent part of the line as an
  error (enabled by default).
</simpara>
</listitem>
<listitem>
<simpara>
<literal>indent-with-non-tab</literal> treats a line that is indented with 8 or more
  space characters as an error (not enabled by default).
</simpara>
</listitem>
<listitem>
<simpara>
<literal>cr-at-eol</literal> treats a carriage-return at the end of line as
  part of the line terminator, i.e. with it, <literal>trailing-space</literal>
  does not trigger if the character before such a carriage-return
  is not a whitespace (not enabled by default).
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.fsyncobjectfiles
</term>
<listitem>
<simpara>
        This boolean will enable <emphasis>fsync()</emphasis> when writing object files.
</simpara>
<simpara>This is a total waste of time and effort on a filesystem that orders
data writes properly, but can be useful for filesystems that do not use
journalling (traditional UNIX filesystems) or that only journal metadata
and not file contents (OS X&#8217;s HFS+, or Linux ext3 with "data=writeback").</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.preloadindex
</term>
<listitem>
<simpara>
        Enable parallel index preload for operations like <emphasis>git diff</emphasis>
</simpara>
<simpara>This can speed up operations like <emphasis>git diff</emphasis> and <emphasis>git status</emphasis> especially
on filesystems like NFS that have weak caching semantics and thus
relatively high IO latencies.  With this set to <emphasis>true</emphasis>, git will do the
index comparison to the filesystem data in parallel, allowing
overlapping IO&#8217;s.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.notesRef
</term>
<listitem>
<simpara>
        When showing commit messages, also show notes which are stored in
        the given ref.  This ref is expected to contain files named
        after the full SHA-1 of the commit they annotate.
</simpara>
<simpara>If such a file exists in the given ref, the referenced blob is read, and
appended to the commit message, separated by a "Notes:" line.  If the
given ref itself does not exist, it is not an error, but means that no
notes should be printed.</simpara>
<simpara>This setting defaults to "refs/notes/commits", and can be overridden by
the <literal>GIT_NOTES_REF</literal> environment variable.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
alias.*
</term>
<listitem>
<simpara>
        Command aliases for the <xref linkend="git(1)"/> command wrapper - e.g.
        after defining "alias.last = cat-file commit HEAD", the invocation
        "git last" is equivalent to "git cat-file commit HEAD". To avoid
        confusion and troubles with script usage, aliases that
        hide existing git commands are ignored. Arguments are split by
        spaces, the usual shell quoting and escaping is supported.
        quote pair and a backslash can be used to quote them.
</simpara>
<simpara>If the alias expansion is prefixed with an exclamation point,
it will be treated as a shell command.  For example, defining
"alias.new = !gitk --all --not ORIG_HEAD", the invocation
"git new" is equivalent to running the shell command
"gitk --all --not ORIG_HEAD".</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
apply.whitespace
</term>
<listitem>
<simpara>
        Tells <emphasis>git-apply</emphasis> how to handle whitespaces, in the same way
        as the <emphasis>--whitespace</emphasis> option. See <xref linkend="git-apply(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
branch.autosetupmerge
</term>
<listitem>
<simpara>
        Tells <emphasis>git-branch</emphasis> and <emphasis>git-checkout</emphasis> to setup new branches
        so that <xref linkend="git-pull(1)"/> will appropriately merge from the
        starting point branch. Note that even if this option is not set,
        this behavior can be chosen per-branch using the <literal>--track</literal>
        and <literal>--no-track</literal> options. The valid settings are: <literal>false</literal>&#8201;&#8212;&#8201;no
        automatic setup is done; <literal>true</literal>&#8201;&#8212;&#8201;automatic setup is done when the
        starting point is a remote branch; <literal>always</literal>&#8201;&#8212;&#8201;automatic setup is
        done when the starting point is either a local branch or remote
        branch. This option defaults to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
branch.autosetuprebase
</term>
<listitem>
<simpara>
        When a new branch is created with <emphasis>git-branch</emphasis> or <emphasis>git-checkout</emphasis>
        that tracks another branch, this variable tells git to set
        up pull to rebase instead of merge (see "branch.&lt;name&gt;.rebase").
        When <literal>never</literal>, rebase is never automatically set to true.
        When <literal>local</literal>, rebase is set to true for tracked branches of
        other local branches.
        When <literal>remote</literal>, rebase is set to true for tracked branches of
        remote branches.
        When <literal>always</literal>, rebase will be set to true for all tracking
        branches.
        See "branch.autosetupmerge" for details on how to set up a
        branch to track another branch.
        This option defaults to never.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
branch.&lt;name&gt;.remote
</term>
<listitem>
<simpara>
        When in branch &lt;name&gt;, it tells <emphasis>git-fetch</emphasis> which remote to fetch.
        If this option is not given, <emphasis>git-fetch</emphasis> defaults to remote "origin".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
branch.&lt;name&gt;.merge
</term>
<listitem>
<simpara>
        When in branch &lt;name&gt;, it tells <emphasis>git-fetch</emphasis> the default
        refspec to be marked for merging in FETCH_HEAD. The value is
        handled like the remote part of a refspec, and must match a
        ref which is fetched from the remote given by
        "branch.&lt;name&gt;.remote".
        The merge information is used by <emphasis>git-pull</emphasis> (which at first calls
        <emphasis>git-fetch</emphasis>) to lookup the default branch for merging. Without
        this option, <emphasis>git-pull</emphasis> defaults to merge the first refspec fetched.
        Specify multiple values to get an octopus merge.
        If you wish to setup <emphasis>git-pull</emphasis> so that it merges into &lt;name&gt; from
        another branch in the local repository, you can point
        branch.&lt;name&gt;.merge to the desired branch, and use the special setting
        <literal>.</literal> (a period) for branch.&lt;name&gt;.remote.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
branch.&lt;name&gt;.mergeoptions
</term>
<listitem>
<simpara>
        Sets default options for merging into branch &lt;name&gt;. The syntax and
        supported options are equal to that of <xref linkend="git-merge(1)"/>, but
        option values containing whitespace characters are currently not
        supported.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
branch.&lt;name&gt;.rebase
</term>
<listitem>
<simpara>
        When true, rebase the branch &lt;name&gt; on top of the fetched branch,
        instead of merging the default branch from the default remote when
        "git pull" is run.
        <emphasis role="strong">NOTE</emphasis>: this is a possibly dangerous operation; do <emphasis role="strong">not</emphasis> use
        it unless you understand the implications (see <xref linkend="git-rebase(1)"/>
        for details).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
browser.&lt;tool&gt;.cmd
</term>
<listitem>
<simpara>
        Specify the command to invoke the specified browser. The
        specified command is evaluated in shell with the URLs passed
        as arguments. (See <xref linkend="git-web&#8212;browse(1)"/>.)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
browser.&lt;tool&gt;.path
</term>
<listitem>
<simpara>
        Override the path for the given tool that may be used to
        browse HTML help (see <emphasis>-w</emphasis> option in <xref linkend="git-help(1)"/>) or a
        working repository in gitweb (see <xref linkend="git-instaweb(1)"/>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
clean.requireForce
</term>
<listitem>
<simpara>
        A boolean to make git-clean do nothing unless given -f
        or -n.   Defaults to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.branch
</term>
<listitem>
<simpara>
        A boolean to enable/disable color in the output of
        <xref linkend="git-branch(1)"/>. May be set to <literal>always</literal>,
        <literal>false</literal> (or <literal>never</literal>) or <literal>auto</literal> (or <literal>true</literal>), in which case colors are used
        only when the output is to a terminal. Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.branch.&lt;slot&gt;
</term>
<listitem>
<simpara>
        Use customized color for branch coloration. <literal>&lt;slot&gt;</literal> is one of
        <literal>current</literal> (the current branch), <literal>local</literal> (a local branch),
        <literal>remote</literal> (a tracking branch in refs/remotes/), <literal>plain</literal> (other
        refs).
</simpara>
<simpara>The value for these configuration variables is a list of colors (at most
two) and attributes (at most one), separated by spaces.  The colors
accepted are <literal>normal</literal>, <literal>black</literal>, <literal>red</literal>, <literal>green</literal>, <literal>yellow</literal>, <literal>blue</literal>,
<literal>magenta</literal>, <literal>cyan</literal> and <literal>white</literal>; the attributes are <literal>bold</literal>, <literal>dim</literal>, <literal>ul</literal>,
<literal>blink</literal> and <literal>reverse</literal>.  The first color given is the foreground; the
second is the background.  The position of the attribute, if any,
doesn&#8217;t matter.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.diff
</term>
<listitem>
<simpara>
        When set to <literal>always</literal>, always use colors in patch.
        When false (or <literal>never</literal>), never.  When set to <literal>true</literal> or <literal>auto</literal>, use
        colors only when the output is to the terminal. Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.diff.&lt;slot&gt;
</term>
<listitem>
<simpara>
        Use customized color for diff colorization.  <literal>&lt;slot&gt;</literal> specifies
        which part of the patch to use the specified color, and is one
        of <literal>plain</literal> (context text), <literal>meta</literal> (metainformation), <literal>frag</literal>
        (hunk header), <literal>old</literal> (removed lines), <literal>new</literal> (added lines),
        <literal>commit</literal> (commit headers), or <literal>whitespace</literal> (highlighting
        whitespace errors). The values of these variables may be specified as
        in color.branch.&lt;slot&gt;.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.interactive
</term>
<listitem>
<simpara>
        When set to <literal>always</literal>, always use colors for interactive prompts
        and displays (such as those used by "git-add --interactive").
        When false (or <literal>never</literal>), never.  When set to <literal>true</literal> or <literal>auto</literal>, use
        colors only when the output is to the terminal. Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.interactive.&lt;slot&gt;
</term>
<listitem>
<simpara>
        Use customized color for <emphasis>git-add --interactive</emphasis>
        output. <literal>&lt;slot&gt;</literal> may be <literal>prompt</literal>, <literal>header</literal>, <literal>help</literal> or <literal>error</literal>, for
        four distinct types of normal output from interactive
        programs.  The values of these variables may be specified as
        in color.branch.&lt;slot&gt;.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.pager
</term>
<listitem>
<simpara>
        A boolean to enable/disable colored output when the pager is in
        use (default is true).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.status
</term>
<listitem>
<simpara>
        A boolean to enable/disable color in the output of
        <xref linkend="git-status(1)"/>. May be set to <literal>always</literal>,
        <literal>false</literal> (or <literal>never</literal>) or <literal>auto</literal> (or <literal>true</literal>), in which case colors are used
        only when the output is to a terminal. Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.status.&lt;slot&gt;
</term>
<listitem>
<simpara>
        Use customized color for status colorization. <literal>&lt;slot&gt;</literal> is
        one of <literal>header</literal> (the header text of the status message),
        <literal>added</literal> or <literal>updated</literal> (files which are added but not committed),
        <literal>changed</literal> (files which are changed but not added in the index),
        <literal>untracked</literal> (files which are not tracked by git), or
        <literal>nobranch</literal> (the color the <emphasis>no branch</emphasis> warning is shown in, defaulting
        to red). The values of these variables may be specified as in
        color.branch.&lt;slot&gt;.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.ui
</term>
<listitem>
<simpara>
        When set to <literal>always</literal>, always use colors in all git commands which
        are capable of colored output. When false (or <literal>never</literal>), never. When
        set to <literal>true</literal> or <literal>auto</literal>, use colors only when the output is to the
        terminal. When more specific variables of color.* are set, they always
        take precedence over this setting. Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
commit.template
</term>
<listitem>
<simpara>
        Specify a file to use as the template for new commit messages.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.autorefreshindex
</term>
<listitem>
<simpara>
        When using <emphasis>git-diff</emphasis> to compare with work tree
        files, do not consider stat-only change as changed.
        Instead, silently run <literal>git update-index --refresh</literal> to
        update the cached stat information for paths whose
        contents in the work tree match the contents in the
        index.  This option defaults to true.  Note that this
        affects only <emphasis>git-diff</emphasis> Porcelain, and not lower level
        <emphasis>diff</emphasis> commands, such as <emphasis>git-diff-files</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.external
</term>
<listitem>
<simpara>
        If this config variable is set, diff generation is not
        performed using the internal diff machinery, but using the
        given command.  Can be overridden with the &#8216;GIT_EXTERNAL_DIFF&#8217;
        environment variable.  The command is called with parameters
        as described under "git Diffs" in <xref linkend="git(1)"/>.  Note: if
        you want to use an external diff program only on a subset of
        your files, you might want to use <xref linkend="gitattributes(5)"/> instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.mnemonicprefix
</term>
<listitem>
<simpara>
        If set, <emphasis>git-diff</emphasis> uses a prefix pair that is different from the
        standard "a/" and "b/" depending on what is being compared.  When
        this configuration is in effect, reverse diff output also swaps
        the order of the prefixes:
</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>git-diff</emphasis>
</term>
<listitem>
<simpara>
        compares the (i)ndex and the (w)ork tree;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git-diff HEAD</emphasis>
</term>
<listitem>
<simpara>
         compares a (c)ommit and the (w)ork tree;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git diff --cached</emphasis>
</term>
<listitem>
<simpara>
        compares a (c)ommit and the (i)ndex;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git-diff HEAD:file1 file2</emphasis>
</term>
<listitem>
<simpara>
        compares an (o)bject and a (w)ork tree entity;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git diff --no-index a b</emphasis>
</term>
<listitem>
<simpara>
        compares two non-git things (1) and (2).
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.renameLimit
</term>
<listitem>
<simpara>
        The number of files to consider when performing the copy/rename
        detection; equivalent to the <emphasis>git-diff</emphasis> option <emphasis>-l</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.renames
</term>
<listitem>
<simpara>
        Tells git to detect renames.  If set to any boolean value, it
        will enable basic rename detection.  If set to "copies" or
        "copy", it will detect copies, as well.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.suppressBlankEmpty
</term>
<listitem>
<simpara>
        A boolean to inhibit the standard behavior of printing a space
        before each empty output line. Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.wordRegex
</term>
<listitem>
<simpara>
        A POSIX Extended Regular Expression used to determine what is a "word"
        when performing word-by-word difference calculations.  Character
        sequences that match the regular expression are "words", all other
        characters are <emphasis role="strong">ignorable</emphasis> whitespace.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.unpackLimit
</term>
<listitem>
<simpara>
        If the number of objects fetched over the git native
        transfer is below this
        limit, then the objects will be unpacked into loose object
        files. However if the number of received objects equals or
        exceeds this limit then the received pack will be stored as
        a pack, after adding any missing delta bases.  Storing the
        pack from a push can make the push operation complete faster,
        especially on slow filesystems.  If not set, the value of
        <literal>transfer.unpackLimit</literal> is used instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.numbered
</term>
<listitem>
<simpara>
        A boolean which can enable or disable sequence numbers in patch
        subjects.  It defaults to "auto" which enables it only if there
        is more than one patch.  It can be enabled or disabled for all
        messages by setting it to "true" or "false".  See --numbered
        option in <xref linkend="git-format-patch(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.headers
</term>
<listitem>
<simpara>
        Additional email headers to include in a patch to be submitted
        by mail.  See <xref linkend="git-format-patch(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.suffix
</term>
<listitem>
<simpara>
        The default for format-patch is to output files with the suffix
        <literal>.patch</literal>. Use this variable to change that suffix (make sure to
        include the dot if you want it).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.pretty
</term>
<listitem>
<simpara>
        The default pretty format for log/show/whatchanged command,
        See <xref linkend="git-log(1)"/>, <xref linkend="git-show(1)"/>,
        <xref linkend="git-whatchanged(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.aggressiveWindow
</term>
<listitem>
<simpara>
        The window size parameter used in the delta compression
        algorithm used by <emphasis>git-gc --aggressive</emphasis>.  This defaults
        to 10.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.auto
</term>
<listitem>
<simpara>
        When there are approximately more than this many loose
        objects in the repository, <literal>git gc --auto</literal> will pack them.
        Some Porcelain commands use this command to perform a
        light-weight garbage collection from time to time.  The
        default value is 6700.  Setting this to 0 disables it.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.autopacklimit
</term>
<listitem>
<simpara>
        When there are more than this many packs that are not
        marked with <literal>*.keep</literal> file in the repository, <literal>git gc
        --auto</literal> consolidates them into one larger pack.  The
        default value is 50.  Setting this to 0 disables it.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.packrefs
</term>
<listitem>
<simpara>
        <emphasis>git-gc</emphasis> does not run <literal>git pack-refs</literal> in a bare repository by
        default so that older dumb-transport clients can still fetch
        from the repository.  Setting this to <literal>true</literal> lets <emphasis>git-gc</emphasis>
        to run <literal>git pack-refs</literal>.  Setting this to <literal>false</literal> tells
        <emphasis>git-gc</emphasis> never to run <literal>git pack-refs</literal>. The default setting is
        <literal>notbare</literal>. Enable it only when you know you do not have to
        support such clients.  The default setting will change to <literal>true</literal>
        at some stage, and setting this to <literal>false</literal> will continue to
        prevent <literal>git pack-refs</literal> from being run from <emphasis>git-gc</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.pruneexpire
</term>
<listitem>
<simpara>
        When <emphasis>git-gc</emphasis> is run, it will call <emphasis>prune --expire 2.weeks.ago</emphasis>.
        Override the grace period with this config variable.  The value
        "now" may be used to disable this  grace period and always prune
        unreachable objects immediately.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.reflogexpire
</term>
<listitem>
<simpara>
        <emphasis>git-reflog expire</emphasis> removes reflog entries older than
        this time; defaults to 90 days.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.reflogexpireunreachable
</term>
<listitem>
<simpara>
        <emphasis>git-reflog expire</emphasis> removes reflog entries older than
        this time and are not reachable from the current tip;
        defaults to 30 days.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.rerereresolved
</term>
<listitem>
<simpara>
        Records of conflicted merge you resolved earlier are
        kept for this many days when <emphasis>git-rerere gc</emphasis> is run.
        The default is 60 days.  See <xref linkend="git-rerere(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.rerereunresolved
</term>
<listitem>
<simpara>
        Records of conflicted merge you have not resolved are
        kept for this many days when <emphasis>git-rerere gc</emphasis> is run.
        The default is 15 days.  See <xref linkend="git-rerere(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.commitmsgannotation
</term>
<listitem>
<simpara>
        Append this string to each commit message. Set to empty string
        to disable this feature. Defaults to "via git-CVS emulator".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.enabled
</term>
<listitem>
<simpara>
        Whether the CVS server interface is enabled for this repository.
        See <xref linkend="git-cvsserver(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.logfile
</term>
<listitem>
<simpara>
        Path to a log file where the CVS server interface well&#8230; logs
        various stuff. See <xref linkend="git-cvsserver(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.usecrlfattr
</term>
<listitem>
<simpara>
        If true, the server will look up the <literal>crlf</literal> attribute for
        files to determine the <emphasis>-k</emphasis> modes to use. If <literal>crlf</literal> is set,
        the <emphasis>-k</emphasis> mode will be left blank, so cvs clients will
        treat it as text. If <literal>crlf</literal> is explicitly unset, the file
        will be set with <emphasis>-kb</emphasis> mode, which suppresses any newline munging
        the client might otherwise do. If <literal>crlf</literal> is not specified,
        then <emphasis>gitcvs.allbinary</emphasis> is used. See <xref linkend="gitattributes(5)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.allbinary
</term>
<listitem>
<simpara>
        This is used if <emphasis>gitcvs.usecrlfattr</emphasis> does not resolve
        the correct <emphasis>-kb</emphasis> mode to use. If true, all
        unresolved files are sent to the client in
        mode <emphasis>-kb</emphasis>. This causes the client to treat them
        as binary files, which suppresses any newline munging it
        otherwise might do. Alternatively, if it is set to "guess",
        then the contents of the file are examined to decide if
        it is binary, similar to <emphasis>core.autocrlf</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.dbname
</term>
<listitem>
<simpara>
        Database used by git-cvsserver to cache revision information
        derived from the git repository. The exact meaning depends on the
        used database driver, for SQLite (which is the default driver) this
        is a filename. Supports variable substitution (see
        <xref linkend="git-cvsserver(1)"/> for details). May not contain semicolons (<literal>;</literal>).
        Default: <emphasis>%Ggitcvs.%m.sqlite</emphasis>
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.dbdriver
</term>
<listitem>
<simpara>
        Used Perl DBI driver. You can specify any available driver
        for this here, but it might not work. git-cvsserver is tested
        with <emphasis>DBD::SQLite</emphasis>, reported to work with <emphasis>DBD::Pg</emphasis>, and
        reported <emphasis role="strong">not</emphasis> to work with <emphasis>DBD::mysql</emphasis>. Experimental feature.
        May not contain double colons (<literal>:</literal>). Default: <emphasis>SQLite</emphasis>.
        See <xref linkend="git-cvsserver(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.dbuser, gitcvs.dbpass
</term>
<listitem>
<simpara>
        Database user and password. Only useful if setting <emphasis>gitcvs.dbdriver</emphasis>,
        since SQLite has no concept of database users and/or passwords.
        <emphasis>gitcvs.dbuser</emphasis> supports variable substitution (see
        <xref linkend="git-cvsserver(1)"/> for details).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.dbTableNamePrefix
</term>
<listitem>
<simpara>
        Database table name prefix.  Prepended to the names of any
        database tables used, allowing a single database to be used
        for several repositories.  Supports variable substitution (see
        <xref linkend="git-cvsserver(1)"/> for details).  Any non-alphabetic
        characters will be replaced with underscores.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>All gitcvs variables except for <emphasis>gitcvs.usecrlfattr</emphasis> and
<emphasis>gitcvs.allbinary</emphasis> can also be specified as
<emphasis>gitcvs.&lt;access_method&gt;.&lt;varname&gt;</emphasis> (where <emphasis>access_method</emphasis>
is one of "ext" and "pserver") to make them apply only for the given
access method.</simpara>
<variablelist>
<varlistentry>
<term>
gui.commitmsgwidth
</term>
<listitem>
<simpara>
        Defines how wide the commit message window is in the
        <xref linkend="git-gui(1)"/>. "75" is the default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.diffcontext
</term>
<listitem>
<simpara>
        Specifies how many context lines should be used in calls to diff
        made by the <xref linkend="git-gui(1)"/>. The default is "5".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.encoding
</term>
<listitem>
<simpara>
        Specifies the default encoding to use for displaying of
        file contents in <xref linkend="git-gui(1)"/> and <xref linkend="gitk(1)"/>.
        It can be overridden by setting the <emphasis>encoding</emphasis> attribute
        for relevant files (see <xref linkend="gitattributes(5)"/>).
        If this option is not set, the tools default to the
        locale encoding.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.matchtrackingbranch
</term>
<listitem>
<simpara>
        Determines if new branches created with <xref linkend="git-gui(1)"/> should
        default to tracking remote branches with matching names or
        not. Default: "false".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.newbranchtemplate
</term>
<listitem>
<simpara>
        Is used as suggested name when creating new branches using the
        <xref linkend="git-gui(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.pruneduringfetch
</term>
<listitem>
<simpara>
        "true" if <xref linkend="git-gui(1)"/> should prune tracking branches when
        performing a fetch. The default value is "false".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.trustmtime
</term>
<listitem>
<simpara>
        Determines if <xref linkend="git-gui(1)"/> should trust the file modification
        timestamp or not. By default the timestamps are not trusted.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.spellingdictionary
</term>
<listitem>
<simpara>
        Specifies the dictionary used for spell checking commit messages in
        the <xref linkend="git-gui(1)"/>. When set to "none" spell checking is turned
        off.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.fastcopyblame
</term>
<listitem>
<simpara>
        If true, <emphasis>git gui blame</emphasis> uses <emphasis>-C</emphasis> instead of <emphasis>-C -C</emphasis> for original
        location detection. It makes blame significantly faster on huge
        repositories at the expense of less thorough copy detection.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.copyblamethreshold
</term>
<listitem>
<simpara>
        Specifies the threshold to use in <emphasis>git gui blame</emphasis> original location
        detection, measured in alphanumeric characters. See the
        <xref linkend="git-blame(1)"/> manual for more information on copy detection.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.blamehistoryctx
</term>
<listitem>
<simpara>
        Specifies the radius of history context in days to show in
        <xref linkend="gitk(1)"/> for the selected commit, when the <literal>Show History
        Context</literal> menu item is invoked from <emphasis>git gui blame</emphasis>. If this
        variable is set to zero, the whole history is shown.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.cmd
</term>
<listitem>
<simpara>
        Specifies the shell command line to execute when the corresponding item
        of the <xref linkend="git-gui(1)"/> <literal>Tools</literal> menu is invoked. This option is
        mandatory for every tool. The command is executed from the root of
        the working directory, and in the environment it receives the name of
        the tool as <emphasis>GIT_GUITOOL</emphasis>, the name of the currently selected file as
        <emphasis>FILENAME</emphasis>, and the name of the current branch as <emphasis>CUR_BRANCH</emphasis> (if
        the head is detached, <emphasis>CUR_BRANCH</emphasis> is empty).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.needsfile
</term>
<listitem>
<simpara>
        Run the tool only if a diff is selected in the GUI. It guarantees
        that <emphasis>FILENAME</emphasis> is not empty.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.noconsole
</term>
<listitem>
<simpara>
        Run the command silently, without creating a window to display its
        output.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.norescan
</term>
<listitem>
<simpara>
        Don&#8217;t rescan the working directory for changes after the tool
        finishes execution.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.confirm
</term>
<listitem>
<simpara>
        Show a confirmation dialog before actually running the tool.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.argprompt
</term>
<listitem>
<simpara>
        Request a string argument from the user, and pass it to the tool
        through the <emphasis>ARGS</emphasis> environment variable. Since requesting an
        argument implies confirmation, the <emphasis>confirm</emphasis> option has no effect
        if this is enabled. If the option is set to <emphasis>true</emphasis>, <emphasis>yes</emphasis>, or <emphasis>1</emphasis>,
        the dialog uses a built-in generic prompt; otherwise the exact
        value of the variable is used.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.revprompt
</term>
<listitem>
<simpara>
        Request a single valid revision from the user, and set the
        <emphasis>REVISION</emphasis> environment variable. In other aspects this option
        is similar to <emphasis>argprompt</emphasis>, and can be used together with it.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.revunmerged
</term>
<listitem>
<simpara>
        Show only unmerged branches in the <emphasis>revprompt</emphasis> subdialog.
        This is useful for tools similar to merge or rebase, but not
        for things like checkout or reset.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.title
</term>
<listitem>
<simpara>
        Specifies the title to use for the prompt dialog. The default
        is the tool name.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.prompt
</term>
<listitem>
<simpara>
        Specifies the general prompt string to display at the top of
        the dialog, before subsections for <emphasis>argprompt</emphasis> and <emphasis>revprompt</emphasis>.
        The default value includes the actual command.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
help.browser
</term>
<listitem>
<simpara>
        Specify the browser that will be used to display help in the
        <emphasis>web</emphasis> format. See <xref linkend="git-help(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
help.format
</term>
<listitem>
<simpara>
        Override the default help format used by <xref linkend="git-help(1)"/>.
        Values <emphasis>man</emphasis>, <emphasis>info</emphasis>, <emphasis>web</emphasis> and <emphasis>html</emphasis> are supported. <emphasis>man</emphasis> is
        the default. <emphasis>web</emphasis> and <emphasis>html</emphasis> are the same.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
help.autocorrect
</term>
<listitem>
<simpara>
        Automatically correct and execute mistyped commands after
        waiting for the given number of deciseconds (0.1 sec). If more
        than one command can be deduced from the entered text, nothing
        will be executed.  If the value of this option is negative,
        the corrected command will be executed immediately. If the
        value is 0 - the command will be just shown but not executed.
        This is the default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.proxy
</term>
<listitem>
<simpara>
        Override the HTTP proxy, normally configured using the <emphasis>http_proxy</emphasis>
        environment variable (see <xref linkend="curl(1)"/>).  This can be overridden
        on a per-remote basis; see remote.&lt;name&gt;.proxy
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslVerify
</term>
<listitem>
<simpara>
        Whether to verify the SSL certificate when fetching or pushing
        over HTTPS. Can be overridden by the <emphasis>GIT_SSL_NO_VERIFY</emphasis> environment
        variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslCert
</term>
<listitem>
<simpara>
        File containing the SSL certificate when fetching or pushing
        over HTTPS. Can be overridden by the <emphasis>GIT_SSL_CERT</emphasis> environment
        variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslKey
</term>
<listitem>
<simpara>
        File containing the SSL private key when fetching or pushing
        over HTTPS. Can be overridden by the <emphasis>GIT_SSL_KEY</emphasis> environment
        variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslCAInfo
</term>
<listitem>
<simpara>
        File containing the certificates to verify the peer with when
        fetching or pushing over HTTPS. Can be overridden by the
        <emphasis>GIT_SSL_CAINFO</emphasis> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslCAPath
</term>
<listitem>
<simpara>
        Path containing files with the CA certificates to verify the peer
        with when fetching or pushing over HTTPS. Can be overridden
        by the <emphasis>GIT_SSL_CAPATH</emphasis> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.maxRequests
</term>
<listitem>
<simpara>
        How many HTTP requests to launch in parallel. Can be overridden
        by the <emphasis>GIT_HTTP_MAX_REQUESTS</emphasis> environment variable. Default is 5.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.lowSpeedLimit, http.lowSpeedTime
</term>
<listitem>
<simpara>
        If the HTTP transfer speed is less than <emphasis>http.lowSpeedLimit</emphasis>
        for longer than <emphasis>http.lowSpeedTime</emphasis> seconds, the transfer is aborted.
        Can be overridden by the <emphasis>GIT_HTTP_LOW_SPEED_LIMIT</emphasis> and
        <emphasis>GIT_HTTP_LOW_SPEED_TIME</emphasis> environment variables.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.noEPSV
</term>
<listitem>
<simpara>
        A boolean which disables using of EPSV ftp command by curl.
        This can helpful with some "poor" ftp servers which don&#8217;t
        support EPSV mode. Can be overridden by the <emphasis>GIT_CURL_FTP_NO_EPSV</emphasis>
        environment variable. Default is false (curl will use EPSV).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
i18n.commitEncoding
</term>
<listitem>
<simpara>
        Character encoding the commit messages are stored in; git itself
        does not care per se, but this information is necessary e.g. when
        importing commits from emails or in the gitk graphical history
        browser (and possibly at other places in the future or in other
        porcelains). See e.g. <xref linkend="git-mailinfo(1)"/>. Defaults to <emphasis>utf-8</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
i18n.logOutputEncoding
</term>
<listitem>
<simpara>
        Character encoding the commit messages are converted to when
        running <emphasis>git-log</emphasis> and friends.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap
</term>
<listitem>
<simpara>
        The configuration variables in the <emphasis>imap</emphasis> section are described
        in <xref linkend="git-imap-send(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
instaweb.browser
</term>
<listitem>
<simpara>
        Specify the program that will be used to browse your working
        repository in gitweb. See <xref linkend="git-instaweb(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
instaweb.httpd
</term>
<listitem>
<simpara>
        The HTTP daemon command-line to start gitweb on your working
        repository. See <xref linkend="git-instaweb(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
instaweb.local
</term>
<listitem>
<simpara>
        If true the web server started by <xref linkend="git-instaweb(1)"/> will
        be bound to the local IP (127.0.0.1).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
instaweb.modulepath
</term>
<listitem>
<simpara>
        The module path for an apache httpd used by <xref linkend="git-instaweb(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
instaweb.port
</term>
<listitem>
<simpara>
        The port number to bind the gitweb httpd to. See
        <xref linkend="git-instaweb(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
interactive.singlekey
</term>
<listitem>
<simpara>
        In interactive programs, allow the user to provide one-letter
        input with a single key (i.e., without hitting enter).
        Currently this is used only by the <literal>--patch</literal> mode of
        <xref linkend="git-add(1)"/>.  Note that this setting is silently
        ignored if portable keystroke input is not available.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.date
</term>
<listitem>
<simpara>
        Set default date-time mode for the log command. Setting log.date
        value is similar to using <emphasis>git-log</emphasis>\'s --date option. The value is one of the
        following alternatives: {relative,local,default,iso,rfc,short}.
        See <xref linkend="git-log(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.showroot
</term>
<listitem>
<simpara>
        If true, the initial commit will be shown as a big creation event.
        This is equivalent to a diff against an empty tree.
        Tools like <xref linkend="git-log(1)"/> or <xref linkend="git-whatchanged(1)"/>, which
        normally hide the root commit will now show it. True by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.mailmap
</term>
<listitem>
<simpara>
        The location of an augmenting mailmap file. The default
        mailmap, located in the root of the repository, is loaded
        first, then the mailmap file pointed to by this variable.
        The location of the mailmap file may be in a repository
        subdirectory, or somewhere outside of the repository itself.
        See <xref linkend="git-shortlog(1)"/> and <xref linkend="git-blame(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
man.viewer
</term>
<listitem>
<simpara>
        Specify the programs that may be used to display help in the
        <emphasis>man</emphasis> format. See <xref linkend="git-help(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
man.&lt;tool&gt;.cmd
</term>
<listitem>
<simpara>
        Specify the command to invoke the specified man viewer. The
        specified command is evaluated in shell with the man page
        passed as argument. (See <xref linkend="git-help(1)"/>.)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
man.&lt;tool&gt;.path
</term>
<listitem>
<simpara>
        Override the path for the given tool that may be used to
        display help in the <emphasis>man</emphasis> format. See <xref linkend="git-help(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.conflictstyle
</term>
<listitem>
<simpara>
        Specify the style in which conflicted hunks are written out to
        working tree files upon merge.  The default is "merge", which
        shows a <literal>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</literal> conflict marker, changes made by one side,
        a <literal>=======</literal> marker, changes made by the other side, and then
        a <literal>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</literal> marker.  An alternate style, "diff3", adds a <literal>|||||||</literal>
        marker and the original text before the <literal>=======</literal> marker.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.log
</term>
<listitem>
<simpara>
        Whether to include summaries of merged commits in newly created
        merge commit messages. False by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.renameLimit
</term>
<listitem>
<simpara>
        The number of files to consider when performing rename detection
        during a merge; if not specified, defaults to the value of
        diff.renameLimit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.stat
</term>
<listitem>
<simpara>
        Whether to print the diffstat between ORIG_HEAD and the merge result
        at the end of the merge.  True by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.tool
</term>
<listitem>
<simpara>
        Controls which merge resolution program is used by
        <xref linkend="git-mergetool(1)"/>.  Valid built-in values are: "kdiff3",
        "tkdiff", "meld", "xxdiff", "emerge", "vimdiff", "gvimdiff", and
        "opendiff".  Any other value is treated is custom merge tool
        and there must be a corresponding mergetool.&lt;tool&gt;.cmd option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.verbosity
</term>
<listitem>
<simpara>
        Controls the amount of output shown by the recursive merge
        strategy.  Level 0 outputs nothing except a final error
        message if conflicts were detected. Level 1 outputs only
        conflicts, 2 outputs conflicts and file changes.  Level 5 and
        above outputs debugging information.  The default is level 2.
        Can be overridden by the <emphasis>GIT_MERGE_VERBOSITY</emphasis> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.&lt;driver&gt;.name
</term>
<listitem>
<simpara>
        Defines a human-readable name for a custom low-level
        merge driver.  See <xref linkend="gitattributes(5)"/> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.&lt;driver&gt;.driver
</term>
<listitem>
<simpara>
        Defines the command that implements a custom low-level
        merge driver.  See <xref linkend="gitattributes(5)"/> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.&lt;driver&gt;.recursive
</term>
<listitem>
<simpara>
        Names a low-level merge driver to be used when
        performing an internal merge between common ancestors.
        See <xref linkend="gitattributes(5)"/> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.&lt;tool&gt;.path
</term>
<listitem>
<simpara>
        Override the path for the given tool.  This is useful in case
        your tool is not in the PATH.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.&lt;tool&gt;.cmd
</term>
<listitem>
<simpara>
        Specify the command to invoke the specified merge tool.  The
        specified command is evaluated in shell with the following
        variables available: <emphasis>BASE</emphasis> is the name of a temporary file
        containing the common base of the files to be merged, if available;
        <emphasis>LOCAL</emphasis> is the name of a temporary file containing the contents of
        the file on the current branch; <emphasis>REMOTE</emphasis> is the name of a temporary
        file containing the contents of the file from the branch being
        merged; <emphasis>MERGED</emphasis> contains the name of the file to which the merge
        tool should write the results of a successful merge.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.&lt;tool&gt;.trustExitCode
</term>
<listitem>
<simpara>
        For a custom merge command, specify whether the exit code of
        the merge command can be used to determine whether the merge was
        successful.  If this is not set to true then the merge target file
        timestamp is checked and the merge assumed to have been successful
        if the file has been updated, otherwise the user is prompted to
        indicate the success of the merge.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.keepBackup
</term>
<listitem>
<simpara>
        After performing a merge, the original file with conflict markers
        can be saved as a file with a <literal>.orig</literal> extension.  If this variable
        is set to <literal>false</literal> then this file is not preserved.  Defaults to
        <literal>true</literal> (i.e. keep the backup files).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.keepTemporaries
</term>
<listitem>
<simpara>
        When invoking a custom merge tool, git uses a set of temporary
        files to pass to the tool. If the tool returns an error and this
        variable is set to <literal>true</literal>, then these temporary files will be
        preserved, otherwise they will be removed after the tool has
        exited. Defaults to <literal>false</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.prompt
</term>
<listitem>
<simpara>
        Prompt before each invocation of the merge resolution program.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.window
</term>
<listitem>
<simpara>
        The size of the window used by <xref linkend="git-pack-objects(1)"/> when no
        window size is given on the command line. Defaults to 10.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.depth
</term>
<listitem>
<simpara>
        The maximum delta depth used by <xref linkend="git-pack-objects(1)"/> when no
        maximum depth is given on the command line. Defaults to 50.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.windowMemory
</term>
<listitem>
<simpara>
        The window memory size limit used by <xref linkend="git-pack-objects(1)"/>
        when no limit is given on the command line.  The value can be
        suffixed with "k", "m", or "g".  Defaults to 0, meaning no
        limit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.compression
</term>
<listitem>
<simpara>
        An integer -1..9, indicating the compression level for objects
        in a pack file. -1 is the zlib default. 0 means no
        compression, and 1..9 are various speed/size tradeoffs, 9 being
        slowest.  If not set,  defaults to core.compression.  If that is
        not set,  defaults to -1, the zlib default, which is "a default
        compromise between speed and compression (currently equivalent
        to level 6)."
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.deltaCacheSize
</term>
<listitem>
<simpara>
        The maximum memory in bytes used for caching deltas in
        <xref linkend="git-pack-objects(1)"/>.
        A value of 0 means no limit. Defaults to 0.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.deltaCacheLimit
</term>
<listitem>
<simpara>
        The maximum size of a delta, that is cached in
        <xref linkend="git-pack-objects(1)"/>. Defaults to 1000.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.threads
</term>
<listitem>
<simpara>
        Specifies the number of threads to spawn when searching for best
        delta matches.  This requires that <xref linkend="git-pack-objects(1)"/>
        be compiled with pthreads otherwise this option is ignored with a
        warning. This is meant to reduce packing time on multiprocessor
        machines. The required amount of memory for the delta search window
        is however multiplied by the number of threads.
        Specifying 0 will cause git to auto-detect the number of CPU&#8217;s
        and set the number of threads accordingly.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.indexVersion
</term>
<listitem>
<simpara>
        Specify the default pack index version.  Valid values are 1 for
        legacy pack index used by Git versions prior to 1.5.2, and 2 for
        the new pack index with capabilities for packs larger than 4 GB
        as well as proper protection against the repacking of corrupted
        packs.  Version 2 is the default.  Note that version 2 is enforced
        and this config option ignored whenever the corresponding pack is
        larger than 2 GB.
</simpara>
<simpara>If you have an old git that does not understand the version 2 <literal>&#42;.idx</literal> file,
cloning or fetching over a non native protocol (e.g. "http" and "rsync")
that will copy both <literal>&#42;.pack</literal> file and corresponding <literal>&#42;.idx</literal> file from the
other side may give you a repository that cannot be accessed with your
older version of git. If the <literal>&#42;.pack</literal> file is smaller than 2 GB, however,
you can use <xref linkend="git-index-pack(1)"/> on the *.pack file to regenerate
the <literal>&#42;.idx</literal> file.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.packSizeLimit
</term>
<listitem>
<simpara>
        The default maximum size of a pack.  This setting only affects
        packing to a file, i.e. the git:// protocol is unaffected.  It
        can be overridden by the <literal>--max-pack-size</literal> option of
        <xref linkend="git-repack(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pager.&lt;cmd&gt;
</term>
<listitem>
<simpara>
        Allows turning on or off pagination of the output of a
        particular git subcommand when writing to a tty.  If
        <literal>--paginate</literal> or <literal>--no-pager</literal> is specified on the command line,
        it takes precedence over this option.  To disable pagination for
        all commands, set <literal>core.pager</literal> or <emphasis>GIT_PAGER</emphasis> to "<literal>cat</literal>".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pull.octopus
</term>
<listitem>
<simpara>
        The default merge strategy to use when pulling multiple branches
        at once.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pull.twohead
</term>
<listitem>
<simpara>
        The default merge strategy to use when pulling a single branch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.fsckObjects
</term>
<listitem>
<simpara>
        If it is set to true, git-receive-pack will check all received
        objects. It will abort in the case of a malformed object or a
        broken link. The result of an abort are only dangling objects.
        Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.unpackLimit
</term>
<listitem>
<simpara>
        If the number of objects received in a push is below this
        limit then the objects will be unpacked into loose object
        files. However if the number of received objects equals or
        exceeds this limit then the received pack will be stored as
        a pack, after adding any missing delta bases.  Storing the
        pack from a push can make the push operation complete faster,
        especially on slow filesystems.  If not set, the value of
        <literal>transfer.unpackLimit</literal> is used instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.denyDeletes
</term>
<listitem>
<simpara>
        If set to true, git-receive-pack will deny a ref update that deletes
        the ref. Use this to prevent such a ref deletion via a push.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.denyCurrentBranch
</term>
<listitem>
<simpara>
        If set to true or "refuse", receive-pack will deny a ref update
        to the currently checked out branch of a non-bare repository.
        Such a push is potentially dangerous because it brings the HEAD
        out of sync with the index and working tree. If set to "warn",
        print a warning of such a push to stderr, but allow the push to
        proceed. If set to false or "ignore", allow such pushes with no
        message. Defaults to "warn".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.denyNonFastForwards
</term>
<listitem>
<simpara>
        If set to true, git-receive-pack will deny a ref update which is
        not a fast forward. Use this to prevent such an update via a push,
        even if that push is forced. This configuration variable is
        set when initializing a shared repository.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.url
</term>
<listitem>
<simpara>
        The URL of a remote repository.  See <xref linkend="git-fetch(1)"/> or
        <xref linkend="git-push(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.proxy
</term>
<listitem>
<simpara>
        For remotes that require curl (http, https and ftp), the URL to
        the proxy to use for that remote.  Set to the empty string to
        disable proxying for that remote.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.fetch
</term>
<listitem>
<simpara>
        The default set of "refspec" for <xref linkend="git-fetch(1)"/>. See
        <xref linkend="git-fetch(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.push
</term>
<listitem>
<simpara>
        The default set of "refspec" for <xref linkend="git-push(1)"/>. See
        <xref linkend="git-push(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.mirror
</term>
<listitem>
<simpara>
        If true, pushing to this remote will automatically behave
        as if the <literal>--mirror</literal> option was given on the command line.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.skipDefaultUpdate
</term>
<listitem>
<simpara>
        If true, this remote will be skipped by default when updating
        using the update subcommand of <xref linkend="git-remote(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.receivepack
</term>
<listitem>
<simpara>
        The default program to execute on the remote side when pushing.  See
        option --receive-pack of <xref linkend="git-push(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.uploadpack
</term>
<listitem>
<simpara>
        The default program to execute on the remote side when fetching.  See
        option --upload-pack of <xref linkend="git-fetch-pack(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.tagopt
</term>
<listitem>
<simpara>
        Setting this value to --no-tags disables automatic tag following when
        fetching from remote &lt;name&gt;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.vcs
</term>
<listitem>
<simpara>
        Setting this to a value &lt;vcs&gt; will cause git to interact with
        the remote with the git-vcs-&lt;vcs&gt; helper.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remotes.&lt;group&gt;
</term>
<listitem>
<simpara>
        The list of remotes which are fetched by "git remote update
        &lt;group&gt;".  See <xref linkend="git-remote(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
repack.usedeltabaseoffset
</term>
<listitem>
<simpara>
        By default, <xref linkend="git-repack(1)"/> creates packs that use
        delta-base offset. If you need to share your repository with
        git older than version 1.4.4, either directly or via a dumb
        protocol such as http, then you need to set this option to
        "false" and repack. Access from old git versions over the
        native protocol are unaffected by this option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rerere.autoupdate
</term>
<listitem>
<simpara>
        When set to true, <literal>git-rerere</literal> updates the index with the
        resulting contents after it cleanly resolves conflicts using
        previously recorded resolution.  Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rerere.enabled
</term>
<listitem>
<simpara>
        Activate recording of resolved conflicts, so that identical
        conflict hunks can be resolved automatically, should they
        be encountered again.  <xref linkend="git-rerere(1)"/> command is by
        default enabled if you create <literal>rr-cache</literal> directory under
        <literal>$GIT_DIR</literal>, but can be disabled by setting this option to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
showbranch.default
</term>
<listitem>
<simpara>
        The default set of branches for <xref linkend="git-show-branch(1)"/>.
        See <xref linkend="git-show-branch(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.relativePaths
</term>
<listitem>
<simpara>
        By default, <xref linkend="git-status(1)"/> shows paths relative to the
        current directory. Setting this variable to <literal>false</literal> shows paths
        relative to the repository root (this was the default for git
        prior to v1.5.4).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.showUntrackedFiles
</term>
<listitem>
<simpara>
        By default, <xref linkend="git-status(1)"/> and <xref linkend="git-commit(1)"/> show
        files which are not currently tracked by Git. Directories which
        contain only untracked files, are shown with the directory name
        only. Showing untracked files means that Git needs to lstat() all
        all the files in the whole repository, which might be slow on some
        systems. So, this variable controls how the commands displays
        the untracked files. Possible values are:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>no</emphasis>     - Show no untracked files
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>normal</emphasis> - Shows untracked files and directories
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>all</emphasis>    - Shows also individual files in untracked directories.
</simpara>
</listitem>
</itemizedlist>
<simpara>If this variable is not specified, it defaults to <emphasis>normal</emphasis>.
This variable can be overridden with the -u|--untracked-files option
of <xref linkend="git-status(1)"/> and <xref linkend="git-commit(1)"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
tar.umask
</term>
<listitem>
<simpara>
        This variable can be used to restrict the permission bits of
        tar archive entries.  The default is 0002, which turns off the
        world write bit.  The special value "user" indicates that the
        archiving user&#8217;s umask will be used instead.  See umask(2) and
        <xref linkend="git-archive(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
transfer.unpackLimit
</term>
<listitem>
<simpara>
        When <literal>fetch.unpackLimit</literal> or <literal>receive.unpackLimit</literal> are
        not set, the value of this variable is used instead.
        The default value is 100.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
url.&lt;base&gt;.insteadOf
</term>
<listitem>
<simpara>
        Any URL that starts with this value will be rewritten to
        start, instead, with &lt;base&gt;. In cases where some site serves a
        large number of repositories, and serves them with multiple
        access methods, and some users need to use different access
        methods, this feature allows people to specify any of the
        equivalent URLs and have git automatically rewrite the URL to
        the best alternative for the particular user, even for a
        never-before-seen repository on the site.  When more than one
        insteadOf strings match a given URL, the longest match is used.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
user.email
</term>
<listitem>
<simpara>
        Your email address to be recorded in any newly created commits.
        Can be overridden by the <emphasis>GIT_AUTHOR_EMAIL</emphasis>, <emphasis>GIT_COMMITTER_EMAIL</emphasis>, and
        <emphasis>EMAIL</emphasis> environment variables.  See <xref linkend="git-commit-tree(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
user.name
</term>
<listitem>
<simpara>
        Your full name to be recorded in any newly created commits.
        Can be overridden by the <emphasis>GIT_AUTHOR_NAME</emphasis> and <emphasis>GIT_COMMITTER_NAME</emphasis>
        environment variables.  See <xref linkend="git-commit-tree(1)"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
user.signingkey
</term>
<listitem>
<simpara>
        If <xref linkend="git-tag(1)"/> is not selecting the key you want it to
        automatically when creating a signed tag, you can override the
        default selection with this variable.  This option is passed
        unchanged to gpg&#8217;s --local-user parameter, so you may specify a key
        using any method that gpg supports.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
web.browser
</term>
<listitem>
<simpara>
        Specify a web browser that may be used by some commands.
        Currently only <xref linkend="git-instaweb(1)"/> and <xref linkend="git-help(1)"/>
        may use it.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
</simplesect>
<simplesect id="_author">
<title>Author</title>
<simpara>Written by Johannes Schindelin &lt;<ulink url="mailto:Johannes.Schindelin@gmx.de">Johannes.Schindelin@gmx.de</ulink>&gt;</simpara>
</simplesect>
<simplesect id="_documentation">
<title>Documentation</title>
<simpara>Documentation by Johannes Schindelin, Petr Baudis and the git-list &lt;<ulink url="mailto:git@vger.kernel.org">git@vger.kernel.org</ulink>&gt;.</simpara>
</simplesect>
<simplesect id="_git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)"/> suite</simpara>
</simplesect>
</article>
