<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<article lang="en" id="git-daemon(1)">
<articleinfo>
    <title>git-daemon(1)</title>
        <indexterm>
                <primary>git-daemon(1)</primary>
        </indexterm>
</articleinfo>
<simplesect id="_name">
<title>NAME</title>
<simpara>git-daemon - A really simple server for git repositories</simpara>
</simplesect>
<simplesect id="_synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout><emphasis>git daemon</emphasis> [--verbose] [--syslog] [--export-all]
             [--timeout=n] [--init-timeout=n] [--max-connections=n]
             [--strict-paths] [--base-path=path] [--base-path-relaxed]
             [--user-path | --user-path=path]
             [--interpolated-path=pathtemplate]
             [--reuseaddr] [--detach] [--pid-file=file]
             [--enable=service] [--disable=service]
             [--allow-override=service] [--forbid-override=service]
             [--inetd | [--listen=host_or_ipaddr] [--port=n] [--user=user [--group=group]]
             [directory&#8230;]</literallayout>
</blockquote>
</simplesect>
<simplesect id="_description">
<title>DESCRIPTION</title>
<simpara>A really simple TCP git daemon that normally listens on port "DEFAULT_GIT_PORT"
aka 9418.  It waits for a connection asking for a service, and will serve
that service if it is enabled.</simpara>
<simpara>It verifies that the directory has the magic file "git-daemon-export-ok", and
it will refuse to export any git directory that hasn&#8217;t explicitly been marked
for export this way (unless the <emphasis>--export-all</emphasis> parameter is specified). If you
pass some directory paths as <emphasis>git-daemon</emphasis> arguments, you can further restrict
the offers to a whitelist comprising of those.</simpara>
<simpara>By default, only <literal>upload-pack</literal> service is enabled, which serves
<emphasis>git-fetch-pack</emphasis> and <emphasis>git-ls-remote</emphasis> clients, which are invoked
from <emphasis>git-fetch</emphasis>, <emphasis>git-pull</emphasis>, and <emphasis>git-clone</emphasis>.</simpara>
<simpara>This is ideally suited for read-only updates, i.e., pulling from
git repositories.</simpara>
<simpara>An <literal>upload-archive</literal> also exists to serve <emphasis>git-archive</emphasis>.</simpara>
</simplesect>
<simplesect id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
--strict-paths
</term>
<listitem>
<simpara>
        Match paths exactly (i.e. don&#8217;t allow "/foo/repo" when the real path is
        "/foo/repo.git" or "/foo/repo/.git") and don&#8217;t do user-relative paths.
        <emphasis>git-daemon</emphasis> will refuse to start when this option is enabled and no
        whitelist is specified.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--base-path
</term>
<listitem>
<simpara>
        Remap all the path requests as relative to the given path.
        This is sort of "GIT root" - if you run <emphasis>git-daemon</emphasis> with
        <emphasis>--base-path=/srv/git</emphasis> on example.com, then if you later try to pull
        <emphasis>git://example.com/hello.git</emphasis>, <emphasis>git-daemon</emphasis> will interpret the path
        as <emphasis>/srv/git/hello.git</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--base-path-relaxed
</term>
<listitem>
<simpara>
        If --base-path is enabled and repo lookup fails, with this option
        <emphasis>git-daemon</emphasis> will attempt to lookup without prefixing the base path.
        This is useful for switching to --base-path usage, while still
        allowing the old paths.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--interpolated-path=pathtemplate
</term>
<listitem>
<simpara>
        To support virtual hosting, an interpolated path template can be
        used to dynamically construct alternate paths.  The template
        supports %H for the target hostname as supplied by the client but
        converted to all lowercase, %CH for the canonical hostname,
        %IP for the server&#8217;s IP address, %P for the port number,
        and %D for the absolute path of the named repository.
        After interpolation, the path is validated against the directory
        whitelist.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--export-all
</term>
<listitem>
<simpara>
        Allow pulling from all directories that look like GIT repositories
        (have the <emphasis>objects</emphasis> and <emphasis>refs</emphasis> subdirectories), even if they
        do not have the <emphasis>git-daemon-export-ok</emphasis> file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--inetd
</term>
<listitem>
<simpara>
        Have the server run as an inetd service. Implies --syslog.
        Incompatible with --port, --listen, --user and --group options.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--listen=host_or_ipaddr
</term>
<listitem>
<simpara>
        Listen on an a specific IP address or hostname.  IP addresses can
        be either an IPv4 address or an IPV6 address if supported.  If IPv6
        is not supported, then --listen=hostname is also not supported and
        --listen must be given an IPv4 address.
        Incompatible with <emphasis>--inetd</emphasis> option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--port=n
</term>
<listitem>
<simpara>
        Listen on an alternative port.  Incompatible with <emphasis>--inetd</emphasis> option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--init-timeout
</term>
<listitem>
<simpara>
        Timeout between the moment the connection is established and the
        client request is received (typically a rather low value, since
        that should be basically immediate).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--timeout
</term>
<listitem>
<simpara>
        Timeout for specific client sub-requests. This includes the time
        it takes for the server to process the sub-request and time spent
        waiting for next client&#8217;s request.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--max-connections
</term>
<listitem>
<simpara>
        Maximum number of concurrent clients, defaults to 32.  Set it to
        zero for no limit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--syslog
</term>
<listitem>
<simpara>
        Log to syslog instead of stderr. Note that this option does not imply
        --verbose, thus by default only error conditions will be logged.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--user-path
</term>
<term>
--user-path=path
</term>
<listitem>
<simpara>
        Allow &#126;user notation to be used in requests.  When
        specified with no parameter, requests to
        git://host/&#126;alice/foo is taken as a request to access
        <emphasis>foo</emphasis> repository in the home directory of user <literal>alice</literal>.
        If <literal>--user-path=path</literal> is specified, the same request is
        taken as a request to access <literal>path/foo</literal> repository in
        the home directory of user <literal>alice</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--verbose
</term>
<listitem>
<simpara>
        Log details about the incoming connections and requested files.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--reuseaddr
</term>
<listitem>
<simpara>
        Use SO_REUSEADDR when binding the listening socket.
        This allows the server to restart without waiting for
        old connections to time out.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--detach
</term>
<listitem>
<simpara>
        Detach from the shell. Implies --syslog.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--pid-file=file
</term>
<listitem>
<simpara>
        Save the process id in <emphasis>file</emphasis>.  Ignored when the daemon
        is run under <literal>--inetd</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--user=user
</term>
<term>
--group=group
</term>
<listitem>
<simpara>
        Change daemon&#8217;s uid and gid before entering the service loop.
        When only <literal>--user</literal> is given without <literal>--group</literal>, the
        primary group ID for the user is used.  The values of
        the option are given to <literal>getpwnam(3)</literal> and <literal>getgrnam(3)</literal>
        and numeric IDs are not supported.
</simpara>
<simpara>Giving these options is an error when used with <literal>--inetd</literal>; use
the facility of inet daemon to achieve the same before spawning
<emphasis>git-daemon</emphasis> if needed.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--enable=service
</term>
<term>
--disable=service
</term>
<listitem>
<simpara>
        Enable/disable the service site-wide per default.  Note
        that a service disabled site-wide can still be enabled
        per repository if it is marked overridable and the
        repository enables the service with an configuration
        item.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--allow-override=service
</term>
<term>
--forbid-override=service
</term>
<listitem>
<simpara>
        Allow/forbid overriding the site-wide default with per
        repository configuration.  By default, all the services
        are overridable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;directory&gt;
</term>
<listitem>
<simpara>
        A directory to add to the whitelist of allowed directories. Unless
        --strict-paths is specified this will also include subdirectories
        of each named directory.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="_services">
<title>SERVICES</title>
<simpara>These services can be globally enabled/disabled using the
command line options of this command.  If a finer-grained
control is desired (e.g. to allow <emphasis>git-archive</emphasis> to be run
against only in a few selected repositories the daemon serves),
the per-repository configuration file can be used to enable or
disable them.</simpara>
<variablelist>
<varlistentry>
<term>
upload-pack
</term>
<listitem>
<simpara>
        This serves <emphasis>git-fetch-pack</emphasis> and <emphasis>git-ls-remote</emphasis>
        clients.  It is enabled by default, but a repository can
        disable it by setting <literal>daemon.uploadpack</literal> configuration
        item to <literal>false</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
upload-archive
</term>
<listitem>
<simpara>
        This serves <emphasis>git-archive --remote</emphasis>.  It is disabled by
        default, but a repository can enable it by setting
        <literal>daemon.uploadarch</literal> configuration item to <literal>true</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive-pack
</term>
<listitem>
<simpara>
        This serves <emphasis>git-send-pack</emphasis> clients, allowing anonymous
        push.  It is disabled by default, as there is <emphasis>no</emphasis>
        authentication in the protocol (in other words, anybody
        can push anything into the repository, including removal
        of refs).  This is solely meant for a closed LAN setting
        where everybody is friendly.  This service can be
        enabled by <literal>daemon.receivepack</literal> configuration item to
        <literal>true</literal>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="_examples">
<title>EXAMPLES</title>
<variablelist>
<varlistentry>
<term>
We assume the following in /etc/services
</term>
<listitem>
<literallayout>$ grep 9418 /etc/services
git             9418/tcp                # Git Version Control System</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git-daemon</emphasis> as inetd server
</term>
<listitem>
<simpara>
        To set up <emphasis>git-daemon</emphasis> as an inetd service that handles any
        repository under the whitelisted set of directories, /pub/foo
        and /pub/bar, place an entry like the following into
        /etc/inetd all on one line:
</simpara>
<literallayout>        git stream tcp nowait nobody  /usr/bin/git
                git daemon --inetd --verbose --export-all
                /pub/foo /pub/bar</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git-daemon</emphasis> as inetd server for virtual hosts
</term>
<listitem>
<simpara>
        To set up <emphasis>git-daemon</emphasis> as an inetd service that handles
        repositories for different virtual hosts, <literal>www.example.com</literal>
        and <literal>www.example.org</literal>, place an entry like the following into
        <literal>/etc/inetd</literal> all on one line:
</simpara>
<literallayout>        git stream tcp nowait nobody /usr/bin/git
                git daemon --inetd --verbose --export-all
                --interpolated-path=/pub/%H%D
                /pub/www.example.org/software
                /pub/www.example.com/software
                /software</literallayout>
<simpara>In this example, the root-level directory <literal>/pub</literal> will contain
a subdirectory for each virtual host name supported.
Further, both hosts advertise repositories simply as
<literal>git://www.example.com/software/repo.git</literal>.  For pre-1.4.0
clients, a symlink from <literal>/software</literal> into the appropriate
default repository could be made as well.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git-daemon</emphasis> as regular daemon for virtual hosts
</term>
<listitem>
<simpara>
        To set up <emphasis>git-daemon</emphasis> as a regular, non-inetd service that
        handles repositories for multiple virtual hosts based on
        their IP addresses, start the daemon like this:
</simpara>
<literallayout>        git daemon --verbose --export-all
                --interpolated-path=/pub/%IP/%D
                /pub/192.168.1.200/software
                /pub/10.10.220.23/software</literallayout>
<simpara>In this example, the root-level directory <literal>/pub</literal> will contain
a subdirectory for each virtual host IP address supported.
Repositories can still be accessed by hostname though, assuming
they correspond to these IP addresses.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
selectively enable/disable services per repository
</term>
<listitem>
<simpara>
        To enable <emphasis>git-archive --remote</emphasis> and disable <emphasis>git-fetch</emphasis> against
        a repository, have the following in the configuration file in the
        repository (that is the file <emphasis>config</emphasis> next to <emphasis>HEAD</emphasis>, <emphasis>refs</emphasis> and
        <emphasis>objects</emphasis>).
</simpara>
<literallayout>        [daemon]
                uploadpack = false
                uploadarch = true</literallayout>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="_environment">
<title>ENVIRONMENT</title>
<simpara><emphasis>git-daemon</emphasis> will set REMOTE_ADDR to the IP address of the client
that connected to it, if the IP address is available. REMOTE_ADDR will
be available in the environment of hooks called when
services are performed.</simpara>
</simplesect>
<simplesect id="_author">
<title>Author</title>
<simpara>Written by Linus Torvalds &lt;<ulink url="mailto:torvalds@osdl.org">torvalds@osdl.org</ulink>&gt;, YOSHIFUJI Hideaki
&lt;<ulink url="mailto:yoshfuji@linux-ipv6.org">yoshfuji@linux-ipv6.org</ulink>&gt; and the git-list &lt;<ulink url="mailto:git@vger.kernel.org">git@vger.kernel.org</ulink>&gt;</simpara>
</simplesect>
<simplesect id="_documentation">
<title>Documentation</title>
<simpara>Documentation by Junio C Hamano and the git-list &lt;<ulink url="mailto:git@vger.kernel.org">git@vger.kernel.org</ulink>&gt;.</simpara>
</simplesect>
<simplesect id="_git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)"/> suite</simpara>
</simplesect>
</article>
