<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<article lang="en" id="git-describe(1)">
<articleinfo>
    <title>git-describe(1)</title>
        <indexterm>
                <primary>git-describe(1)</primary>
        </indexterm>
</articleinfo>
<simplesect id="_name">
<title>NAME</title>
<simpara>git-describe - Show the most recent tag that is reachable from a commit</simpara>
</simplesect>
<simplesect id="_synopsis">
<title>SYNOPSIS</title>
<simpara><emphasis>git describe</emphasis> [--all] [--tags] [--contains] [--abbrev=&lt;n&gt;] &lt;committish&gt;&#8230;</simpara>
</simplesect>
<simplesect id="_description">
<title>DESCRIPTION</title>
<simpara>The command finds the most recent tag that is reachable from a
commit.  If the tag points to the commit, then only the tag is
shown.  Otherwise, it suffixes the tag name with the number of
additional commits on top of the tagged object and the
abbreviated object name of the most recent commit.</simpara>
<simpara>By default (without --all or --tags) <literal>git describe</literal> only shows
annotated tags.  For more information about creating annotated tags
see the -a and -s options to <xref linkend="git-tag(1)"/>.</simpara>
</simplesect>
<simplesect id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
&lt;committish&gt;&#8230;
</term>
<listitem>
<simpara>
        Committish object names to describe.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--all
</term>
<listitem>
<simpara>
        Instead of using only the annotated tags, use any ref
        found in <literal>.git/refs/</literal>.  This option enables matching
        any known branch, remote branch, or lightweight tag.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--tags
</term>
<listitem>
<simpara>
        Instead of using only the annotated tags, use any tag
        found in <literal>.git/refs/tags</literal>.  This option enables matching
        a lightweight (non-annotated) tag.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--contains
</term>
<listitem>
<simpara>
        Instead of finding the tag that predates the commit, find
        the tag that comes after the commit, and thus contains it.
        Automatically implies --tags.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--abbrev=&lt;n&gt;
</term>
<listitem>
<simpara>
        Instead of using the default 7 hexadecimal digits as the
        abbreviated object name, use &lt;n&gt; digits.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--candidates=&lt;n&gt;
</term>
<listitem>
<simpara>
        Instead of considering only the 10 most recent tags as
        candidates to describe the input committish consider
        up to &lt;n&gt; candidates.  Increasing &lt;n&gt; above 10 will take
        slightly longer but may produce a more accurate result.
        An &lt;n&gt; of 0 will cause only exact matches to be output.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--exact-match
</term>
<listitem>
<simpara>
        Only output exact matches (a tag directly references the
        supplied commit).  This is a synonym for --candidates=0.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--debug
</term>
<listitem>
<simpara>
        Verbosely display information about the searching strategy
        being employed to standard error.  The tag name will still
        be printed to standard out.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--long
</term>
<listitem>
<simpara>
        Always output the long format (the tag, the number of commits
        and the abbreviated commit name) even when it matches a tag.
        This is useful when you want to see parts of the commit object name
        in "describe" output, even when the commit in question happens to be
        a tagged version.  Instead of just emitting the tag name, it will
        describe such a commit as v1.2-0-deadbeef (0th commit since tag v1.2
        that points at object deadbeef&#8230;.).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--match &lt;pattern&gt;
</term>
<listitem>
<simpara>
        Only consider tags matching the given pattern (can be used to avoid
        leaking private tags made from the repository).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--always
</term>
<listitem>
<simpara>
        Show uniquely abbreviated commit object as fallback.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="_examples">
<title>EXAMPLES</title>
<simpara>With something like git.git current tree, I get:</simpara>
<literallayout class="monospaced">[torvalds@g5 git]$ git describe parent
v1.0.4-14-g2414721</literallayout>
<simpara>i.e. the current head of my "parent" branch is based on v1.0.4,
but since it has a few commits on top of that,
describe has added the number of additional commits ("14") and
an abbreviated object name for the commit itself ("2414721")
at the end.</simpara>
<simpara>The number of additional commits is the number
of commits which would be displayed by "git log v1.0.4..parent".
The hash suffix is "-g" + 7-char abbreviation for the tip commit
of parent (which was <literal>2414721b194453f058079d897d13c4e377f92dc6</literal>).</simpara>
<simpara>Doing a <emphasis>git-describe</emphasis> on a tag-name will just show the tag name:</simpara>
<literallayout class="monospaced">[torvalds@g5 git]$ git describe v1.0.4
v1.0.4</literallayout>
<simpara>With --all, the command can use branch heads as references, so
the output shows the reference path as well:</simpara>
<literallayout class="monospaced">[torvalds@g5 git]$ git describe --all --abbrev=4 v1.0.5^2
tags/v1.0.0-21-g975b</literallayout>
<literallayout class="monospaced">[torvalds@g5 git]$ git describe --all HEAD^
heads/lt/describe-7-g975b</literallayout>
<simpara>With --abbrev set to 0, the command can be used to find the
closest tagname without any suffix:</simpara>
<literallayout class="monospaced">[torvalds@g5 git]$ git describe --abbrev=0 v1.0.5^2
tags/v1.0.0</literallayout>
</simplesect>
<simplesect id="_search_strategy">
<title>SEARCH STRATEGY</title>
<simpara>For each committish supplied, <emphasis>git-describe</emphasis> will first look for
a tag which tags exactly that commit.  Annotated tags will always
be preferred over lightweight tags, and tags with newer dates will
always be preferred over tags with older dates.  If an exact match
is found, its name will be output and searching will stop.</simpara>
<simpara>If an exact match was not found, <emphasis>git-describe</emphasis> will walk back
through the commit history to locate an ancestor commit which
has been tagged.  The ancestor&#8217;s tag will be output along with an
abbreviation of the input committish&#8217;s SHA1.</simpara>
<simpara>If multiple tags were found during the walk then the tag which
has the fewest commits different from the input committish will be
selected and output.  Here fewest commits different is defined as
the number of commits which would be shown by <literal>git log tag..input</literal>
will be the smallest number of commits possible.</simpara>
</simplesect>
<simplesect id="_author">
<title>Author</title>
<simpara>Written by Linus Torvalds &lt;<ulink url="mailto:torvalds@osdl.org">torvalds@osdl.org</ulink>&gt;, but somewhat
butchered by Junio C Hamano &lt;<ulink url="mailto:gitster@pobox.com">gitster@pobox.com</ulink>&gt;.  Later significantly
updated by Shawn Pearce &lt;<ulink url="mailto:spearce@spearce.org">spearce@spearce.org</ulink>&gt;.</simpara>
</simplesect>
<simplesect id="_documentation">
<title>Documentation</title>
<simpara>Documentation by David Greaves, Junio C Hamano and the git-list &lt;<ulink url="mailto:git@vger.kernel.org">git@vger.kernel.org</ulink>&gt;.</simpara>
</simplesect>
<simplesect id="_git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)"/> suite</simpara>
</simplesect>
</article>
