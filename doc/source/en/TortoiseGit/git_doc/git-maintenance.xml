<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 SYSTEM "../../../dtd/dblite.dtd">

<sect2 lang="en" id="git-maintenance(1)">
    <title>git-maintenance(1)</title>
<indexterm>
<primary>git-maintenance(1)</primary>
</indexterm>
<simplesect id="git-maintenance(1)__name">
<title>NAME</title>
<simpara>git-maintenance - Run tasks to optimize Git repository data</simpara>
</simplesect>
<simplesect id="git-maintenance(1)__synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout><emphasis>git maintenance</emphasis> run [&lt;options&gt;]</literallayout>
</blockquote>
</simplesect>
<simplesect id="git-maintenance(1)__description">
<title>DESCRIPTION</title>
<simpara>Run tasks to optimize Git repository data, speeding up other Git commands
and reducing storage requirements for the repository.</simpara>
<simpara>Git commands that add repository data, such as <emphasis>git add</emphasis> or <emphasis>git fetch</emphasis>,
are optimized for a responsive user experience. These commands do not take
time to optimize the Git data, since such optimizations scale with the full
size of the repository while these user commands each perform a relatively
small action.</simpara>
<simpara>The <emphasis>git maintenance</emphasis> command provides flexibility for how to optimize the
Git repository.</simpara>
</simplesect>
<simplesect id="git-maintenance(1)__subcommands">
<title>SUBCOMMANDS</title>
<variablelist>
<varlistentry>
<term>
register
</term>
<listitem>
<simpara>
        Initialize Git config values so any scheduled maintenance will
        start running on this repository. This adds the repository to the
        <emphasis>maintenance.repo</emphasis> config variable in the current user's global
        config and enables some recommended configuration values for
        <emphasis>maintenance.&lt;task&gt;.schedule</emphasis>. The tasks that are enabled are safe
        for running in the background without disrupting foreground
        processes.
</simpara>
<simpara>The <emphasis>register</emphasis> subcommand will also set the <emphasis>maintenance.strategy</emphasis> config
value to <emphasis>incremental</emphasis>, if this value is not previously set. The
<emphasis>incremental</emphasis> strategy uses the following schedule for each maintenance
task:</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>gc</emphasis>: disabled.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>commit-graph</emphasis>: hourly.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>prefetch</emphasis>: hourly.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>loose-objects</emphasis>: daily.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>incremental-repack</emphasis>: daily.
</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis>git maintenance register</emphasis> will also disable foreground maintenance by
setting <emphasis>maintenance.auto = false</emphasis> in the current repository. This config
setting will remain after a <emphasis>git maintenance unregister</emphasis> command.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
run
</term>
<listitem>
<simpara>
        Run one or more maintenance tasks. If one or more <emphasis>--task</emphasis> options
        are specified, then those tasks are run in that order. Otherwise,
        the tasks are determined by which <emphasis>maintenance.&lt;task&gt;.enabled</emphasis>
        config options are true. By default, only <emphasis>maintenance.gc.enabled</emphasis>
        is true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
start
</term>
<listitem>
<simpara>
        Start running maintenance on the current repository. This performs
        the same config updates as the <emphasis>register</emphasis> subcommand, then updates
        the background scheduler to run <emphasis>git maintenance run --scheduled</emphasis>
        on an hourly basis.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
stop
</term>
<listitem>
<simpara>
        Halt the background maintenance schedule. The current repository
        is not removed from the list of maintained repositories, in case
        the background maintenance is restarted later.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
unregister
</term>
<listitem>
<simpara>
        Remove the current repository from background maintenance. This
        only removes the repository from the configured list. It does not
        stop the background maintenance processes from running.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-maintenance(1)__tasks">
<title>TASKS</title>
<variablelist>
<varlistentry>
<term>
commit-graph
</term>
<listitem>
<simpara>
        The <emphasis>commit-graph</emphasis> job updates the <emphasis>commit-graph</emphasis> files incrementally,
        then verifies that the written data is correct. The incremental
        write is safe to run alongside concurrent Git processes since it
        will not expire <emphasis>.graph</emphasis> files that were in the previous
        <emphasis>commit-graph-chain</emphasis> file. They will be deleted by a later run based
        on the expiration delay.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
prefetch
</term>
<listitem>
<simpara>
        The <emphasis>prefetch</emphasis> task updates the object directory with the latest
        objects from all registered remotes. For each remote, a <emphasis>git fetch</emphasis>
        command is run. The refmap is custom to avoid updating local or remote
        branches (those in <emphasis>refs/heads</emphasis> or <emphasis>refs/remotes</emphasis>). Instead, the
        remote refs are stored in <emphasis>refs/prefetch/&lt;remote&gt;/</emphasis>. Also, tags are
        not updated.
</simpara>
<simpara>This is done to avoid disrupting the remote-tracking branches. The end users
expect these refs to stay unmoved unless they initiate a fetch.  With prefetch
task, however, the objects necessary to complete a later real fetch would
already be obtained, so the real fetch would go faster.  In the ideal case,
it will just become an update to a bunch of remote-tracking branches without
any object transfer.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc
</term>
<listitem>
<simpara>
        Clean up unnecessary files and optimize the local repository. "GC"
        stands for "garbage collection," but this task performs many
        smaller tasks. This task can be expensive for large repositories,
        as it repacks all Git objects into a single pack-file. It can also
        be disruptive in some situations, as it deletes stale data. See
        <xref linkend="git-gc(1)" /> for more details on garbage collection in Git.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
loose-objects
</term>
<listitem>
<simpara>
        The <emphasis>loose-objects</emphasis> job cleans up loose objects and places them into
        pack-files. In order to prevent race conditions with concurrent Git
        commands, it follows a two-step process. First, it deletes any loose
        objects that already exist in a pack-file; concurrent Git processes
        will examine the pack-file for the object data instead of the loose
        object. Second, it creates a new pack-file (starting with "loose-")
        containing a batch of loose objects. The batch size is limited to 50
        thousand objects to prevent the job from taking too long on a
        repository with many loose objects. The <emphasis>gc</emphasis> task writes unreachable
        objects as loose objects to be cleaned up by a later step only if
        they are not re-added to a pack-file; for this reason it is not
        advisable to enable both the <emphasis>loose-objects</emphasis> and <emphasis>gc</emphasis> tasks at the
        same time.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
incremental-repack
</term>
<listitem>
<simpara>
        The <emphasis>incremental-repack</emphasis> job repacks the object directory
        using the <emphasis>multi-pack-index</emphasis> feature. In order to prevent race
        conditions with concurrent Git commands, it follows a two-step
        process. First, it calls <emphasis>git multi-pack-index expire</emphasis> to delete
        pack-files unreferenced by the <emphasis>multi-pack-index</emphasis> file. Second, it
        calls <emphasis>git multi-pack-index repack</emphasis> to select several small
        pack-files and repack them into a bigger one, and then update the
        <emphasis>multi-pack-index</emphasis> entries that refer to the small pack-files to
        refer to the new pack-file. This prepares those small pack-files
        for deletion upon the next run of <emphasis>git multi-pack-index expire</emphasis>.
        The selection of the small pack-files is such that the expected
        size of the big pack-file is at least the batch size; see the
        <emphasis>--batch-size</emphasis> option for the <emphasis>repack</emphasis> subcommand in
        <xref linkend="git-multi-pack-index(1)" />. The default batch-size is zero,
        which is a special case that attempts to repack all pack-files
        into a single pack-file.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-maintenance(1)__options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
--auto
</term>
<listitem>
<simpara>
        When combined with the <emphasis>run</emphasis> subcommand, run maintenance tasks
        only if certain thresholds are met. For example, the <emphasis>gc</emphasis> task
        runs when the number of loose objects exceeds the number stored
        in the <emphasis>gc.auto</emphasis> config setting, or when the number of pack-files
        exceeds the <emphasis>gc.autoPackLimit</emphasis> config setting. Not compatible with
        the <emphasis>--schedule</emphasis> option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--schedule
</term>
<listitem>
<simpara>
        When combined with the <emphasis>run</emphasis> subcommand, run maintenance tasks
        only if certain time conditions are met, as specified by the
        <emphasis>maintenance.&lt;task&gt;.schedule</emphasis> config value for each <emphasis>&lt;task&gt;</emphasis>.
        This config value specifies a number of seconds since the last
        time that task ran, according to the <emphasis>maintenance.&lt;task&gt;.lastRun</emphasis>
        config value. The tasks that are tested are those provided by
        the <emphasis>--task=&lt;task&gt;</emphasis> option(s) or those with
        <emphasis>maintenance.&lt;task&gt;.enabled</emphasis> set to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--quiet
</term>
<listitem>
<simpara>
        Do not report progress or other information over <emphasis>stderr</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--task=&lt;task&gt;
</term>
<listitem>
<simpara>
        If this option is specified one or more times, then only run the
        specified tasks in the specified order. If no <emphasis>--task=&lt;task&gt;</emphasis>
        arguments are specified, then only the tasks with
        <emphasis>maintenance.&lt;task&gt;.enabled</emphasis> configured as <emphasis>true</emphasis> are considered.
        See the <emphasis>TASKS</emphasis> section for the list of accepted <emphasis>&lt;task&gt;</emphasis> values.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-maintenance(1)__troubleshooting">
<title>TROUBLESHOOTING</title>
<simpara>The <emphasis>git maintenance</emphasis> command is designed to simplify the repository
maintenance patterns while minimizing user wait time during Git commands.
A variety of configuration options are available to allow customizing this
process. The default maintenance options focus on operations that complete
quickly, even on large repositories.</simpara>
<simpara>Users may find some cases where scheduled maintenance tasks do not run as
frequently as intended. Each <emphasis>git maintenance run</emphasis> command takes a lock on
the repository's object database, and this prevents other concurrent
<emphasis>git maintenance run</emphasis> commands from running on the same repository. Without
this safeguard, competing processes could leave the repository in an
unpredictable state.</simpara>
<simpara>The background maintenance schedule runs <emphasis>git maintenance run</emphasis> processes
on an hourly basis. Each run executes the "hourly" tasks. At midnight,
that process also executes the "daily" tasks. At midnight on the first day
of the week, that process also executes the "weekly" tasks. A single
process iterates over each registered repository, performing the scheduled
tasks for that frequency. Depending on the number of registered
repositories and their sizes, this process may take longer than an hour.
In this case, multiple <emphasis>git maintenance run</emphasis> commands may run on the same
repository at the same time, colliding on the object database lock. This
results in one of the two tasks not running.</simpara>
<simpara>If you find that some maintenance windows are taking longer than one hour
to complete, then consider reducing the complexity of your maintenance
tasks. For example, the <emphasis>gc</emphasis> task is much slower than the
<emphasis>incremental-repack</emphasis> task. However, this comes at a cost of a slightly
larger object database. Consider moving more expensive tasks to be run
less frequently.</simpara>
<simpara>Expert users may consider scheduling their own maintenance tasks using a
different schedule than is available through <emphasis>git maintenance start</emphasis> and
Git configuration options. These users should be aware of the object
database lock and how concurrent <emphasis>git maintenance run</emphasis> commands behave.
Further, the <emphasis>git gc</emphasis> command should not be combined with
<emphasis>git maintenance run</emphasis> commands. <emphasis>git gc</emphasis> modifies the object database
but does not take the lock in the same way as <emphasis>git maintenance run</emphasis>. If
possible, use <emphasis>git maintenance run --task=gc</emphasis> instead of <emphasis>git gc</emphasis>.</simpara>
</simplesect>
<simplesect id="git-maintenance(1)__git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</sect2>
