<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<article lang="en" id="git-merge(1)">
<articleinfo>
    <title>git-merge(1)</title>
        <indexterm>
                <primary>git-merge(1)</primary>
        </indexterm>
</articleinfo>
<simplesect id="_name">
<title>NAME</title>
<simpara>git-merge - Join two or more development histories together</simpara>
</simplesect>
<simplesect id="_synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout><emphasis>git merge</emphasis> [-n] [--stat] [--no-commit] [--squash] [-s &lt;strategy&gt;]&#8230;
        [-m &lt;msg&gt;] &lt;remote&gt; &lt;remote&gt;&#8230;
<emphasis>git merge</emphasis> &lt;msg&gt; HEAD &lt;remote&gt;&#8230;</literallayout>
</blockquote>
</simplesect>
<simplesect id="_description">
<title>DESCRIPTION</title>
<simpara>This is the top-level interface to the merge machinery
which drives multiple merge strategy scripts.</simpara>
<simpara>The second syntax (&lt;msg&gt; <literal>HEAD</literal> &lt;remote&gt;) is supported for
historical reasons.  Do not use it from the command line or in
new scripts.  It is the same as <literal>git merge -m &lt;msg&gt; &lt;remote&gt;</literal>.</simpara>
</simplesect>
<simplesect id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
-q
</term>
<term>
--quiet
</term>
<listitem>
<simpara>
        Operate quietly.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-v
</term>
<term>
--verbose
</term>
<listitem>
<simpara>
        Be verbose.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--stat
</term>
<listitem>
<simpara>
        Show a diffstat at the end of the merge. The diffstat is also
        controlled by the configuration option merge.stat.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-n
</term>
<term>
--no-stat
</term>
<listitem>
<simpara>
        Do not show a diffstat at the end of the merge.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--summary
</term>
<term>
--no-summary
</term>
<listitem>
<simpara>
        Synonyms to --stat and --no-stat; these are deprecated and will be
        removed in the future.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--log
</term>
<listitem>
<simpara>
        In addition to branch names, populate the log message with
        one-line descriptions from the actual commits that are being
        merged.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-log
</term>
<listitem>
<simpara>
        Do not list one-line descriptions from the actual commits being
        merged.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-commit
</term>
<listitem>
<simpara>
        Perform the merge but pretend the merge failed and do
        not autocommit, to give the user a chance to inspect and
        further tweak the merge result before committing.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--commit
</term>
<listitem>
<simpara>
        Perform the merge and commit the result. This option can
        be used to override --no-commit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--squash
</term>
<listitem>
<simpara>
        Produce the working tree and index state as if a real
        merge happened, but do not actually make a commit or
        move the <literal>HEAD</literal>, nor record <literal>$GIT_DIR/MERGE_HEAD</literal> to
        cause the next <literal>git commit</literal> command to create a merge
        commit.  This allows you to create a single commit on
        top of the current branch whose effect is the same as
        merging another branch (or more in case of an octopus).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-squash
</term>
<listitem>
<simpara>
        Perform the merge and commit the result. This option can
        be used to override --squash.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-ff
</term>
<listitem>
<simpara>
        Generate a merge commit even if the merge resolved as a
        fast-forward.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--ff
</term>
<listitem>
<simpara>
        Do not generate a merge commit if the merge resolved as
        a fast-forward, only update the branch pointer. This is
        the default behavior of git-merge.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-s &lt;strategy&gt;
</term>
<term>
--strategy=&lt;strategy&gt;
</term>
<listitem>
<simpara>
        Use the given merge strategy; can be supplied more than
        once to specify them in the order they should be tried.
        If there is no <literal>-s</literal> option, a built-in list of strategies
        is used instead (<emphasis>git-merge-recursive</emphasis> when merging a single
        head, <emphasis>git-merge-octopus</emphasis> otherwise).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-m &lt;msg&gt;
</term>
<listitem>
<simpara>
        The commit message to be used for the merge commit (in case
        it is created). The <emphasis>git-fmt-merge-msg</emphasis> script can be used
        to give a good default for automated <emphasis>git-merge</emphasis> invocations.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;remote&gt;&#8230;
</term>
<listitem>
<simpara>
        Other branch heads to merge into our branch.  You need at
        least one &lt;remote&gt;.  Specifying more than one &lt;remote&gt;
        obviously means you are trying an Octopus.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="_merge_strategies">
<title>MERGE STRATEGIES</title>
<variablelist>
<varlistentry>
<term>
resolve
</term>
<listitem>
<simpara>
        This can only resolve two heads (i.e. the current branch
        and another branch you pulled from) using 3-way merge
        algorithm.  It tries to carefully detect criss-cross
        merge ambiguities and is considered generally safe and
        fast.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
recursive
</term>
<listitem>
<simpara>
        This can only resolve two heads using 3-way merge
        algorithm.  When there are more than one common
        ancestors that can be used for 3-way merge, it creates a
        merged tree of the common ancestors and uses that as
        the reference tree for the 3-way merge.  This has been
        reported to result in fewer merge conflicts without
        causing mis-merges by tests done on actual merge commits
        taken from Linux 2.6 kernel development history.
        Additionally this can detect and handle merges involving
        renames.  This is the default merge strategy when
        pulling or merging one branch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
octopus
</term>
<listitem>
<simpara>
        This resolves more than two-head case, but refuses to do
        complex merge that needs manual resolution.  It is
        primarily meant to be used for bundling topic branch
        heads together.  This is the default merge strategy when
        pulling or merging more than one branches.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
ours
</term>
<listitem>
<simpara>
        This resolves any number of heads, but the result of the
        merge is always the current branch head.  It is meant to
        be used to supersede old development history of side
        branches.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
subtree
</term>
<listitem>
<simpara>
        This is a modified recursive strategy. When merging trees A and
        B, if B corresponds to a subtree of A, B is first adjusted to
        match the tree structure of A, instead of reading the trees at
        the same level. This adjustment is also done to the common
        ancestor tree.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>If you tried a merge which resulted in a complex conflicts and
would want to start over, you can recover with <emphasis>git-reset</emphasis>.</simpara>
</simplesect>
<simplesect id="_configuration">
<title>CONFIGURATION</title>
<variablelist>
<varlistentry>
<term>
merge.conflictstyle
</term>
<listitem>
<simpara>
        Specify the style in which conflicted hunks are written out to
        working tree files upon merge.  The default is "merge", which
        shows a <literal>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</literal> conflict marker, changes made by one side,
        a <literal>=======</literal> marker, changes made by the other side, and then
        a <literal>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</literal> marker.  An alternate style, "diff3", adds a <literal>|||||||</literal>
        marker and the original text before the <literal>=======</literal> marker.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.log
</term>
<listitem>
<simpara>
        Whether to include summaries of merged commits in newly created
        merge commit messages. False by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.renameLimit
</term>
<listitem>
<simpara>
        The number of files to consider when performing rename detection
        during a merge; if not specified, defaults to the value of
        diff.renameLimit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.stat
</term>
<listitem>
<simpara>
        Whether to print the diffstat between ORIG_HEAD and the merge result
        at the end of the merge.  True by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.tool
</term>
<listitem>
<simpara>
        Controls which merge resolution program is used by
        <xref linkend="git-mergetool(1)"/>.  Valid built-in values are: "kdiff3",
        "tkdiff", "meld", "xxdiff", "emerge", "vimdiff", "gvimdiff", and
        "opendiff".  Any other value is treated is custom merge tool
        and there must be a corresponding mergetool.&lt;tool&gt;.cmd option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.verbosity
</term>
<listitem>
<simpara>
        Controls the amount of output shown by the recursive merge
        strategy.  Level 0 outputs nothing except a final error
        message if conflicts were detected. Level 1 outputs only
        conflicts, 2 outputs conflicts and file changes.  Level 5 and
        above outputs debugging information.  The default is level 2.
        Can be overridden by the <emphasis>GIT_MERGE_VERBOSITY</emphasis> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.&lt;driver&gt;.name
</term>
<listitem>
<simpara>
        Defines a human-readable name for a custom low-level
        merge driver.  See <xref linkend="gitattributes(5)"/> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.&lt;driver&gt;.driver
</term>
<listitem>
<simpara>
        Defines the command that implements a custom low-level
        merge driver.  See <xref linkend="gitattributes(5)"/> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.&lt;driver&gt;.recursive
</term>
<listitem>
<simpara>
        Names a low-level merge driver to be used when
        performing an internal merge between common ancestors.
        See <xref linkend="gitattributes(5)"/> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
branch.&lt;name&gt;.mergeoptions
</term>
<listitem>
<simpara>
        Sets default options for merging into branch &lt;name&gt;. The syntax and
        supported options are equal to that of <emphasis>git-merge</emphasis>, but option values
        containing whitespace characters are currently not supported.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="_how_merge_works">
<title>HOW MERGE WORKS</title>
<simpara>A merge is always between the current <literal>HEAD</literal> and one or more
commits (usually, branch head or tag), and the index file must
match the tree of <literal>HEAD</literal> commit (i.e. the contents of the last commit)
when it starts out.  In other words, <literal>git diff --cached HEAD</literal> must
report no changes.  (One exception is when the changed index
entries are already in the same state that would result from
the merge anyway.)</simpara>
<simpara>Three kinds of merge can happen:</simpara>
<itemizedlist>
<listitem>
<simpara>
The merged commit is already contained in <literal>HEAD</literal>. This is the
  simplest case, called "Already up-to-date."
</simpara>
</listitem>
<listitem>
<simpara>
<literal>HEAD</literal> is already contained in the merged commit. This is the
  most common case especially when invoked from <emphasis>git pull</emphasis>:
  you are tracking an upstream repository, have committed no local
  changes and now you want to update to a newer upstream revision.
  Your <literal>HEAD</literal> (and the index) is updated to point at the merged
  commit, without creating an extra merge commit.  This is
  called "Fast-forward".
</simpara>
</listitem>
<listitem>
<simpara>
Both the merged commit and <literal>HEAD</literal> are independent and must be
  tied together by a merge commit that has both of them as its parents.
  The rest of this section describes this "True merge" case.
</simpara>
</listitem>
</itemizedlist>
<simpara>The chosen merge strategy merges the two commits into a single
new source tree.
When things merge cleanly, this is what happens:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
The results are updated both in the index file and in your
   working tree;
</simpara>
</listitem>
<listitem>
<simpara>
Index file is written out as a tree;
</simpara>
</listitem>
<listitem>
<simpara>
The tree gets committed; and
</simpara>
</listitem>
<listitem>
<simpara>
The <literal>HEAD</literal> pointer gets advanced.
</simpara>
</listitem>
</orderedlist>
<simpara>Because of 2., we require that the original state of the index
file matches exactly the current <literal>HEAD</literal> commit; otherwise we
will write out your local changes already registered in your
index file along with the merge result, which is not good.
Because 1. involves only those paths differing between your
branch and the remote branch you are pulling from during the
merge (which is typically a fraction of the whole tree), you can
have local modifications in your working tree as long as they do
not overlap with what the merge updates.</simpara>
<simpara>When there are conflicts, the following happens:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
<literal>HEAD</literal> stays the same.
</simpara>
</listitem>
<listitem>
<simpara>
Cleanly merged paths are updated both in the index file and
   in your working tree.
</simpara>
</listitem>
<listitem>
<simpara>
For conflicting paths, the index file records up to three
   versions; stage1 stores the version from the common ancestor,
   stage2 from <literal>HEAD</literal>, and stage3 from the remote branch (you
   can inspect the stages with <literal>git ls-files -u</literal>).  The working
   tree files contain the result of the "merge" program; i.e. 3-way
   merge results with familiar conflict markers <literal>&lt;&lt;&lt; === &gt;&gt;&gt;</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
No other changes are done.  In particular, the local
   modifications you had before you started merge will stay the
   same and the index entries for them stay as they were,
   i.e. matching <literal>HEAD</literal>.
</simpara>
</listitem>
</orderedlist>
</simplesect>
<simplesect id="_how_conflicts_are_presented">
<title>HOW CONFLICTS ARE PRESENTED</title>
<simpara>During a merge, the working tree files are updated to reflect the result
of the merge.  Among the changes made to the common ancestor&#8217;s version,
non-overlapping ones (that is, you changed an area of the file while the
other side left that area intact, or vice versa) are incorporated in the
final result verbatim.  When both sides made changes to the same area,
however, git cannot randomly pick one side over the other, and asks you to
resolve it by leaving what both sides did to that area.</simpara>
<simpara>By default, git uses the same style as that is used by "merge" program
from the RCS suite to present such a conflicted hunk, like this:</simpara>
<literallayout>Here are lines that are either unchanged from the common
ancestor, or cleanly resolved because only one side changed.
&lt;&lt;&lt;&lt;&lt;&lt;&lt; yours:sample.txt
Conflict resolution is hard;
let's go shopping.
=======
Git makes conflict resolution easy.
&gt;&gt;&gt;&gt;&gt;&gt;&gt; theirs:sample.txt
And here is another line that is cleanly resolved or unmodified.</literallayout>
<simpara>The area where a pair of conflicting changes happened is marked with markers
"<literal>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</literal>", "<literal>=======</literal>", and "<literal>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</literal>".  The part before the "<literal>=======</literal>"
is typically your side, and the part afterwards is typically their side.</simpara>
<simpara>The default format does not show what the original said in the conflicting
area.  You cannot tell how many lines are deleted and replaced with
Barbie&#8217;s remark on your side.  The only thing you can tell is that your
side wants to say it is hard and you&#8217;d prefer to go shopping, while the
other side wants to claim it is easy.</simpara>
<simpara>An alternative style can be used by setting the "merge.conflictstyle"
configuration variable to "diff3".  In "diff3" style, the above conflict
may look like this:</simpara>
<literallayout>Here are lines that are either unchanged from the common
ancestor, or cleanly resolved because only one side changed.
&lt;&lt;&lt;&lt;&lt;&lt;&lt; yours:sample.txt
Conflict resolution is hard;
let's go shopping.
|||||||
Conflict resolution is hard.
=======
Git makes conflict resolution easy.
&gt;&gt;&gt;&gt;&gt;&gt;&gt; theirs:sample.txt
And here is another line that is cleanly resolved or unmodified.</literallayout>
<simpara>In addition to the "<literal>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</literal>", "<literal>=======</literal>", and "<literal>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</literal>" markers, it uses
another "<literal>|||||||</literal>" marker that is followed by the original text.  You can
tell that the original just stated a fact, and your side simply gave in to
that statement and gave up, while the other side tried to have a more
positive attitude.  You can sometimes come up with a better resolution by
viewing the original.</simpara>
</simplesect>
<simplesect id="_how_to_resolve_conflicts">
<title>HOW TO RESOLVE CONFLICTS</title>
<simpara>After seeing a conflict, you can do two things:</simpara>
<itemizedlist>
<listitem>
<simpara>
Decide not to merge.  The only clean-ups you need are to reset
   the index file to the <literal>HEAD</literal> commit to reverse 2. and to clean
   up working tree changes made by 2. and 3.; <emphasis>git-reset --hard</emphasis> can
   be used for this.
</simpara>
</listitem>
<listitem>
<simpara>
Resolve the conflicts.  Git will mark the conflicts in
   the working tree.  Edit the files into shape and
   <emphasis>git-add</emphasis> them to the index.  Use <emphasis>git-commit</emphasis> to seal the deal.
</simpara>
</listitem>
</itemizedlist>
<simpara>You can work through the conflict with a number of tools:</simpara>
<itemizedlist>
<listitem>
<simpara>
Use a mergetool.  <emphasis>git mergetool</emphasis> to launch a graphical
   mergetool which will work you through the merge.
</simpara>
</listitem>
<listitem>
<simpara>
Look at the diffs.  <emphasis>git diff</emphasis> will show a three-way diff,
   highlighting changes from both the HEAD and remote versions.
</simpara>
</listitem>
<listitem>
<simpara>
Look at the diffs on their own. <emphasis>git log --merge -p &lt;path&gt;</emphasis>
   will show diffs first for the HEAD version and then the
   remote version.
</simpara>
</listitem>
<listitem>
<simpara>
Look at the originals.  <emphasis>git show :1:filename</emphasis> shows the
   common ancestor, <emphasis>git show :2:filename</emphasis> shows the HEAD
   version and <emphasis>git show :3:filename</emphasis> shows the remote version.
</simpara>
</listitem>
</itemizedlist>
</simplesect>
<simplesect id="_see_also">
<title>SEE ALSO</title>
<simpara><xref linkend="git-fmt-merge-msg(1)"/>, <xref linkend="git-pull(1)"/>,
<xref linkend="gitattributes(5)"/>,
<xref linkend="git-reset(1)"/>,
<xref linkend="git-diff(1)"/>, <xref linkend="git-ls-files(1)"/>,
<xref linkend="git-add(1)"/>, <xref linkend="git-rm(1)"/>,
<xref linkend="git-mergetool(1)"/></simpara>
</simplesect>
<simplesect id="_author">
<title>Author</title>
<simpara>Written by Junio C Hamano &lt;<ulink url="mailto:gitster@pobox.com">gitster@pobox.com</ulink>&gt;</simpara>
</simplesect>
<simplesect id="_documentation">
<title>Documentation</title>
<simpara>Documentation by Junio C Hamano and the git-list &lt;<ulink url="mailto:git@vger.kernel.org">git@vger.kernel.org</ulink>&gt;.</simpara>
</simplesect>
<simplesect id="_git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)"/> suite</simpara>
</simplesect>
</article>
