From 1855ca47e678e00ba9151f9734d7e682b7c67f6d Mon Sep 17 00:00:00 2001
From: Sven Strickroth <email@cs-ware.de>
Date: Sun, 1 Feb 2015 13:39:31 +0100
Subject: [PATCH] Make CRLF filter behave like vanilla git for adding files
 in combination with attributes

Based on lots of manual testing (even with "malformed" files and binary) with vanilla git executable...

Signed-off-by: Sven Strickroth <email@cs-ware.de>
---
 src/crlf.c   | 57 +++++++++++++++++++++++++++++++++------------------------
 1 files changed, 29 insertions(+), 28 deletions(-)

diff --git a/src/crlf.c b/src/crlf.c
index 858a94484..468f33b4c 100644
--- a/src/crlf.c
+++ b/src/crlf.c
@@ -124,18 +124,21 @@ static int crlf_apply_to_odb(
 	const git_buf *from,
 	const git_filter_source *src)
 {
+	git_buf_text_stats stats;
+	bool is_binary;
+
 	/* Empty file? Nothing to do */
 	if (!git_buf_len(from))
 		return 0;
 
+	is_binary = git_buf_text_gather_stats(&stats, from, false);
+
 	/* Heuristics to see if we can skip the conversion.
 	 * Straight from Core Git.
 	 */
 	if (ca->crlf_action == GIT_CRLF_AUTO || ca->crlf_action == GIT_CRLF_GUESS) {
-		git_buf_text_stats stats;
-
-		/* Check heuristics for binary vs text - returns true if binary */
-		if (git_buf_text_gather_stats(&stats, from, false))
+		/* Check heuristics for binary vs text */
+		if (is_binary)
 			return GIT_PASSTHROUGH;
 
 		/*
@@ -146,16 +149,26 @@ static int crlf_apply_to_odb(
 		if (stats.cr != stats.crlf)
 			return GIT_PASSTHROUGH;
 
-		/* If there are no CR characters to filter out and CrLf is not set to "true", then just pass */
-		if (!stats.cr && ca->auto_crlf != GIT_AUTO_CRLF_TRUE)
-			return GIT_PASSTHROUGH;
+		if (ca->crlf_action == GIT_CRLF_GUESS) {
+			/*
+			 * If the file in the index has any CR in it, do not convert.
+			 * This is the new safer autocrlf handling.
+			 */
+			if (has_cr_in_index(src))
+				return GIT_PASSTHROUGH;
+		}
+	}
 
-		/* If safecrlf is enabled, sanity-check the result. */
-		if (stats.lf != stats.crlf) {
+	/* If safecrlf is enabled, sanity-check the result. */
+	if (ca->crlf_action == GIT_CRLF_INPUT ||
+		(ca->auto_crlf == GIT_AUTO_CRLF_INPUT &&
+		(ca->crlf_action == GIT_CRLF_GUESS || ca->crlf_action == GIT_CRLF_AUTO ||
+		(ca->crlf_action == GIT_CRLF_TEXT && ca->eol==GIT_EOL_UNSET)))) {
+		if (stats.crlf) {
 			switch (ca->safe_crlf) {
 			case GIT_SAFE_CRLF_FAIL:
 				giterr_set(
-					GITERR_FILTER, "LF would be replaced by CRLF in '%s'",
+					GITERR_FILTER, "CRLF would be replaced by LF in '%s'",
 					git_filter_source_path(src));
 				return -1;
 			case GIT_SAFE_CRLF_WARN:
@@ -164,11 +177,15 @@ static int crlf_apply_to_odb(
 			default:
 				break;
 			}
-		} else if (stats.crlf && ca->auto_crlf == GIT_AUTO_CRLF_INPUT) {
+		}
+	} else if (ca->crlf_action == GIT_CRLF_CRLF ||
+				(ca->auto_crlf == GIT_AUTO_CRLF_TRUE && ca->crlf_action == GIT_CRLF_GUESS ||
+				((ca->crlf_action == GIT_CRLF_TEXT || ca->crlf_action == GIT_CRLF_AUTO) && ca->eol == GIT_EOL_UNSET))) {
+		if (stats.lf != stats.crlf) {
 			switch (ca->safe_crlf) {
 			case GIT_SAFE_CRLF_FAIL:
 				giterr_set(
-					GITERR_FILTER, "CRLF would be replaced by LF in '%s'",
+					GITERR_FILTER, "LF would be replaced by CRLF in '%s'",
 					git_filter_source_path(src));
 				return -1;
 			case GIT_SAFE_CRLF_WARN:
@@ -178,20 +195,12 @@ static int crlf_apply_to_odb(
 				break;
 			}
 		}
-
-		if (ca->crlf_action == GIT_CRLF_GUESS) {
-			/*
-			 * If the file in the index has any CR in it, do not convert.
-			 * This is the new safer autocrlf handling.
-			 */
-			if (has_cr_in_index(src))
-				return GIT_PASSTHROUGH;
-		}
-
-		if (!stats.cr)
-			return GIT_PASSTHROUGH;
 	}
 
+	/* If there are no CR characters to filter out, then just pass */
+	if (!stats.cr)
+		return GIT_PASSTHROUGH;
+
 	/* Actually drop the carriage returns */
 	return git_buf_text_crlf_to_lf(to, from);
 }
-- 
2.11.0.windows.3

