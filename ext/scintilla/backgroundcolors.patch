 ext/scintilla/include/Scintilla.h    |  2 ++
 ext/scintilla/src/EditView.cxx       | 12 +++++++++++-
 ext/scintilla/src/EditView.h         |  1 +
 ext/scintilla/src/Editor.cxx         |  1 +
 ext/scintilla/src/Editor.h           |  2 ++
 ext/scintilla/win32/ScintillaWin.cxx |  8 ++++++++
 6 files changed, 25 insertions(+), 1 deletion(-)

diff --git a/ext/scintilla/include/Scintilla.h b/ext/scintilla/include/Scintilla.h
index f2e655353..4d2b8b876 100644
--- a/ext/scintilla/include/Scintilla.h
+++ b/ext/scintilla/include/Scintilla.h
@@ -1242,6 +1242,8 @@ typedef sptr_t (*SciFnDirectStatus)(sptr_t ptr, unsigned int iMessage, uptr_t wP
 
 #endif
 
+#define SCN_GETBKCOLOR 5000
+
 /* These structures are defined to be exactly the same shape as the Win32
  * CHARRANGE, TEXTRANGE, FINDTEXTEX, FORMATRANGE, and NMHDR structs.
  * So older code that treats Scintilla as a RichEdit will work. */
diff --git a/ext/scintilla/src/EditView.cxx b/ext/scintilla/src/EditView.cxx
index a1f72f5ff..34e9664f9 100644
--- a/ext/scintilla/src/EditView.cxx
+++ b/ext/scintilla/src/EditView.cxx
@@ -61,6 +61,7 @@
 #include "MarginView.h"
 #include "EditView.h"
 #include "ElapsedPeriod.h"
+#include "Editor.h"
 
 using namespace Scintilla;
 using namespace Scintilla::Internal;
@@ -187,6 +188,7 @@ EditView::EditView() {
 	tabArrowHeight = 4;
 	customDrawTabArrow = nullptr;
 	customDrawWrapMarker = nullptr;
+	editor = nullptr;
 }
 
 EditView::~EditView() = default;
@@ -2200,7 +2202,15 @@ void EditView::DrawLine(Surface *surface, const EditModel &model, const ViewStyl
 	}
 
 	// See if something overrides the line background colour.
-	const std::optional<ColourRGBA> background = vsDraw.Background(model.pdoc->GetMark(line), model.caret.active, ll->containsCaret);
+	std::optional<ColourRGBA> background = vsDraw.Background(model.pdoc->GetMark(line), model.caret.active, ll->containsCaret);
+	SCNotification scn = { 0 };
+	scn.nmhdr.code = SCN_GETBKCOLOR;
+	scn.line = line;
+	scn.lParam = -1;
+	if (editor)
+		((Editor*)editor)->NotifyParent(&scn);
+	if (scn.lParam != -1)
+		background = ColourRGBA::FromRGB(static_cast<int>(scn.lParam));
 
 	const Sci::Position posLineStart = model.pdoc->LineStart(line);
 
diff --git a/ext/scintilla/src/EditView.h b/ext/scintilla/src/EditView.h
index 3085f9461..a077966d3 100644
--- a/ext/scintilla/src/EditView.h
+++ b/ext/scintilla/src/EditView.h
@@ -78,6 +78,7 @@ public:
 	std::unique_ptr<Surface> pixmapLine;
 	std::unique_ptr<Surface> pixmapIndentGuide;
 	std::unique_ptr<Surface> pixmapIndentGuideHighlight;
+	void *editor;
 
 	LineLayoutCache llc;
 	PositionCache posCache;
diff --git a/ext/scintilla/src/Editor.cxx b/ext/scintilla/src/Editor.cxx
index 7c1fe1bd6..902eca5d4 100644
--- a/ext/scintilla/src/Editor.cxx
+++ b/ext/scintilla/src/Editor.cxx
@@ -117,6 +117,7 @@ static constexpr bool IsAllSpacesOrTabs(std::string_view sv) noexcept {
 }
 
 Editor::Editor() : durationWrapOneByte(0.000001, 0.0000001, 0.00001) {
+	view.editor = this;
 	ctrlID = 0;
 
 	stylesValid = false;
diff --git a/ext/scintilla/src/Editor.h b/ext/scintilla/src/Editor.h
index db575f013..7f322f4ac 100644
--- a/ext/scintilla/src/Editor.h
+++ b/ext/scintilla/src/Editor.h
@@ -7,6 +7,7 @@
 
 #ifndef EDITOR_H
 #define EDITOR_H
+#include "Scintilla.h"
 
 namespace Scintilla::Internal {
 
@@ -663,6 +664,7 @@ protected:	// ScintillaBase subclass needs access to much of Editor
 public:
 	~Editor() override;
 
+	virtual void NotifyParent(SCNotification *scn) = 0;
 	// Public so the COM thunks can access it.
 	bool IsUnicodeMode() const noexcept;
 	// Public so scintilla_send_message can use it.
diff --git a/ext/scintilla/win32/ScintillaWin.cxx b/ext/scintilla/win32/ScintillaWin.cxx
index 4c4ee22af..0540e25fb 100644
--- a/ext/scintilla/win32/ScintillaWin.cxx
+++ b/ext/scintilla/win32/ScintillaWin.cxx
@@ -436,6 +436,7 @@ class ScintillaWin :
 	void SetCtrlID(int identifier) override;
 	int GetCtrlID() override;
 	void NotifyParent(NotificationData scn) override;
+	virtual void NotifyParent(SCNotification *scn);
 	void NotifyDoubleClick(Point pt, KeyMod modifiers) override;
 	std::unique_ptr<CaseFolder> CaseFolderForEncoding() override;
 	std::string CaseMapString(const std::string &s, CaseMapping caseMapping) override;
@@ -2336,6 +2337,13 @@ void ScintillaWin::NotifyParent(NotificationData scn) {
 	              GetCtrlID(), reinterpret_cast<LPARAM>(&scn));
 }
 
+void ScintillaWin::NotifyParent(SCNotification *scn) {
+	scn->nmhdr.hwndFrom = MainHWND();
+	scn->nmhdr.idFrom = GetCtrlID();
+	::SendMessage(::GetParent(MainHWND()), WM_NOTIFY,
+		GetCtrlID(), reinterpret_cast<LPARAM>(scn));
+}
+
 void ScintillaWin::NotifyDoubleClick(Point pt, KeyMod modifiers) {
 	//Platform::DebugPrintf("ScintillaWin Double click 0\n");
 	ScintillaBase::NotifyDoubleClick(pt, modifiers);
